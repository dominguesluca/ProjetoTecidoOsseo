{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const questions = [{\n    question: 'São tipos de tecido ósseo?',\n    correctAnswers: ['COMPACTO', 'ESPONJOSO']\n  }, {\n    question: 'Classificação histológica dos ossos',\n    correctAnswers: ['IMATURO', 'LAMELAR']\n  }, {\n    question: 'São duas camadas principais dos ossos',\n    correctAnswers: ['ENDÓSTEO', 'PERIOSTEO']\n  }, {\n    question: 'Celula responsável pela produção de atriz ossea',\n    correctAnswers: ['OSTEOBLASTO']\n  }, {\n    question: 'Principais minerais presentes nos ossos',\n    correctAnswers: ['C��LCIO', 'FÓSFORO']\n  }\n\n  // Add the rest of the questions...\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState({});\n  const [wordGrid, setWordGrid] = useState([]);\n  const gridSize = wordGrid.length || 8; // Set gridSize to the actual grid length or 8 if it's not defined yet\n  const [correctCells, setCorrectCells] = useState([]);\n  useEffect(() => {\n    generateWordGrid();\n    setSelectedAnswers({});\n  }, [currentQuestion]);\n  const generateWordGrid = () => {\n    const longestWordLength = Math.max(...questions[currentQuestion].correctAnswers.map(word => word.length));\n    const gridSize = Math.max(8, longestWordLength);\n    const grid = Array.from({\n      length: gridSize\n    }, () => Array(gridSize).fill(''));\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    questions[currentQuestion].correctAnswers.forEach(word => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Select a random direction: horizontal (0) or vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n      do {\n        row = Math.floor(Math.random() * gridSize);\n        col = Math.floor(Math.random() * gridSize);\n        tries++;\n        if (tries > 100) return; // Avoid infinite loop\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n      placeWord(grid, row, col, word, direction);\n    });\n    fillEmptyCells(grid, availableChars);\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < length; i++) {\n        if (col + i >= grid.length || col + i < 0 || grid[row][(col + i + grid.length) % grid.length] !== '') {\n          return false;\n        }\n      }\n    } else {\n      for (let i = 0; i < length; i++) {\n        if (row + i >= grid.length || row + i < 0 || grid[(row + i + grid.length) % grid.length][col] !== '') {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][(col + i + grid.length) % grid.length] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[(row + i + grid.length) % grid.length][col] = word[i];\n      }\n    }\n  };\n  const fillEmptyCells = (grid, availableChars) => {\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[row].length; col++) {\n        if (grid[row][col] === '') {\n          const randomIndex = Math.floor(Math.random() * availableChars.length);\n          grid[row][col] = availableChars[randomIndex];\n        }\n      }\n    }\n  };\n  const handleAnswerClick = (row, col) => {\n    const cellValue = wordGrid[row][col];\n    if (questions[currentQuestion].correctAnswers.includes(cellValue)) {\n      const newSelectedAnswers = {\n        ...selectedAnswers\n      };\n      newSelectedAnswers[`${row},${col}`] = cellValue;\n      setSelectedAnswers(newSelectedAnswers);\n      setWordGrid(prevWordGrid => {\n        const newGrid = [...prevWordGrid];\n        newGrid[row][col] = ' ';\n        return newGrid;\n      });\n      setCorrectCells(prevCorrectCells => [...prevCorrectCells, `${row},${col}`]);\n    }\n  };\n  const checkWord = () => {\n    const correctWords = questions[currentQuestion].correctAnswers;\n    const selectedWords = Object.values(selectedAnswers);\n    return correctWords.every(word => selectedWords.includes(word));\n  };\n  const isNextButtonEnabled = () => {\n    return checkWord();\n  };\n  const isBackButtonEnabled = () => {\n    return currentQuestion > 0;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-background\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"question\",\n        children: questions[currentQuestion].question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-grid\",\n        children: wordGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-grid-row\",\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `word-grid-cell ${selectedAnswers[`${rowIndex},${colIndex}`] && questions[currentQuestion].correctAnswers.includes(cell) ? 'correct' : ''} ${selectedAnswers[`${rowIndex},${colIndex}`] ? 'selected' : ''}`,\n            onClick: () => {\n              handleAnswerClick(rowIndex, colIndex);\n              if (questions[currentQuestion].correctAnswers.includes(cell)) {\n                // Add the correct answer to the selected answers\n                setSelectedAnswers(prevAnswers => ({\n                  ...prevAnswers,\n                  [`${rowIndex},${colIndex}`]: cell\n                }));\n              }\n            },\n            children: cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), isNextButtonEnabled() && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: () => setCurrentQuestion(currentQuestion + 1),\n      children: \"Pr\\xF3xima\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this), isBackButtonEnabled() && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"back-button\",\n      onClick: () => setCurrentQuestion(currentQuestion - 1),\n      children: \"Voltar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"TP8GNEeXpAOhLYe92O+KfjiXddE=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Questions","_s","questions","question","correctAnswers","currentQuestion","setCurrentQuestion","selectedAnswers","setSelectedAnswers","wordGrid","setWordGrid","gridSize","length","correctCells","setCorrectCells","generateWordGrid","longestWordLength","Math","max","map","word","grid","Array","from","fill","availableChars","forEach","wordLength","row","col","tries","direction","random","floor","canPlaceWord","placeWord","fillEmptyCells","console","log","i","randomIndex","handleAnswerClick","cellValue","includes","newSelectedAnswers","prevWordGrid","newGrid","prevCorrectCells","checkWord","correctWords","selectedWords","Object","values","every","isNextButtonEnabled","isBackButtonEnabled","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rowIndex","cell","colIndex","onClick","prevAnswers","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  const questions = [\n    {\n      question: 'São tipos de tecido ósseo?',\n      correctAnswers: ['COMPACTO', 'ESPONJOSO']\n    },\n    {\n      question: 'Classificação histológica dos ossos',\n      correctAnswers: ['IMATURO', 'LAMELAR']\n    },\n\n    {\n      question: 'São duas camadas principais dos ossos',\n      correctAnswers: ['ENDÓSTEO', 'PERIOSTEO']\n    },\n    {\n      question: 'Celula responsável pela produção de atriz ossea',\n      correctAnswers: ['OSTEOBLASTO']\n    },\n    {\n      question: 'Principais minerais presentes nos ossos',\n      correctAnswers: ['C��LCIO', 'FÓSFORO']\n    },\n\n\n    // Add the rest of the questions...\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState({});\n  const [wordGrid, setWordGrid] = useState([]);\n  const gridSize = wordGrid.length || 8; // Set gridSize to the actual grid length or 8 if it's not defined yet\n  const [correctCells, setCorrectCells] = useState([]);\n\n  useEffect(() => {\n    generateWordGrid();\n    setSelectedAnswers({});\n  }, [currentQuestion]);\n\n  const generateWordGrid = () => {\n    const longestWordLength = Math.max(...questions[currentQuestion].correctAnswers.map(word => word.length));\n    const gridSize = Math.max(8, longestWordLength);\n    const grid = Array.from({ length: gridSize }, () => Array(gridSize).fill(''));\n\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    questions[currentQuestion].correctAnswers.forEach((word) => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Select a random direction: horizontal (0) or vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n\n      do {\n        row = Math.floor(Math.random() * gridSize);\n        col = Math.floor(Math.random() * gridSize);\n        tries++;\n        if (tries > 100) return; // Avoid infinite loop\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n\n      placeWord(grid, row, col, word, direction);\n    });\n\n    fillEmptyCells(grid, availableChars);\n\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < length; i++) {\n        if (col + i >= grid.length || col + i < 0 || grid[row][(col + i + grid.length) % grid.length] !== '') {\n          return false;\n        }\n      }\n    } else {\n      for (let i = 0; i < length; i++) {\n        if (row + i >= grid.length || row + i < 0 || grid[(row + i + grid.length) % grid.length][col] !== '') {\n          return false;\n        }\n      }\n    }\n\n\n\n    return true;\n  };\n\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][(col + i + grid.length) % grid.length] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[(row + i + grid.length) % grid.length][col] = word[i];\n      }\n    }\n  };\n\n  const fillEmptyCells = (grid, availableChars) => {\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[row].length; col++) {\n        if (grid[row][col] === '') {\n          const randomIndex = Math.floor(Math.random() * availableChars.length);\n          grid[row][col] = availableChars[randomIndex];\n        }\n      }\n    }\n  };\n\n  const handleAnswerClick = (row, col) => {\n  const cellValue = wordGrid[row][col];\n  if (questions[currentQuestion].correctAnswers.includes(cellValue)) {\n    const newSelectedAnswers = {...selectedAnswers };\n    newSelectedAnswers[`${row},${col}`] = cellValue;\n    setSelectedAnswers(newSelectedAnswers);\n    setWordGrid((prevWordGrid) => {\n      const newGrid = [...prevWordGrid];\n      newGrid[row][col] = ' ';\n      return newGrid;\n    });\n    setCorrectCells((prevCorrectCells) => [...prevCorrectCells, `${row},${col}`]);\n  }\n};\n\n  const checkWord = () => {\n    const correctWords = questions[currentQuestion].correctAnswers;\n    const selectedWords = Object.values(selectedAnswers);\n    return correctWords.every(word => selectedWords.includes(word));\n  };\n\n  const isNextButtonEnabled = () => {\n    return checkWord();\n  };\n\n  const isBackButtonEnabled = () => {\n    return currentQuestion > 0;\n  };\n\n  return (\n    <div className=\"questions-container\">\n      <div className=\"question-background\">\n        <h2 className=\"question\">{questions[currentQuestion].question}</h2>\n      </div>\n      <div className=\"grid-container\">\n        <div className=\"word-grid\">\n          {wordGrid.map((row, rowIndex) => (\n            <div key={rowIndex} className=\"word-grid-row\">\n              {row.map((cell, colIndex) => (\n                <div\n                  key={colIndex}\n                  className={`word-grid-cell ${selectedAnswers[`${rowIndex},${colIndex}`] && questions[currentQuestion].correctAnswers.includes(cell)? 'correct' : ''} ${selectedAnswers[`${rowIndex},${colIndex}`]? 'selected' : ''}`}\n                  onClick={() => {\n                    handleAnswerClick(rowIndex, colIndex);\n                    if (questions[currentQuestion].correctAnswers.includes(cell)) {\n                      // Add the correct answer to the selected answers\n                      setSelectedAnswers((prevAnswers) => ({...prevAnswers, [`${rowIndex},${colIndex}`]: cell }));\n                    }\n                  }}\n                >\n                  {cell}\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n      {isNextButtonEnabled() && (\n        <button className=\"next-button\" onClick={() => setCurrentQuestion(currentQuestion + 1)}>\n          Próxima\n        </button>\n      )}\n      {isBackButtonEnabled() && (\n        <button className=\"back-button\" onClick={() => setCurrentQuestion(currentQuestion - 1)}>\n          Voltar\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Questions;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,SAAS,GAAG,CAChB;IACEC,QAAQ,EAAE,4BAA4B;IACtCC,cAAc,EAAE,CAAC,UAAU,EAAE,WAAW;EAC1C,CAAC,EACD;IACED,QAAQ,EAAE,qCAAqC;IAC/CC,cAAc,EAAE,CAAC,SAAS,EAAE,SAAS;EACvC,CAAC,EAED;IACED,QAAQ,EAAE,uCAAuC;IACjDC,cAAc,EAAE,CAAC,UAAU,EAAE,WAAW;EAC1C,CAAC,EACD;IACED,QAAQ,EAAE,iDAAiD;IAC3DC,cAAc,EAAE,CAAC,aAAa;EAChC,CAAC,EACD;IACED,QAAQ,EAAE,yCAAyC;IACnDC,cAAc,EAAE,CAAC,SAAS,EAAE,SAAS;EACvC;;EAGA;EAAA,CACD;EAED,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACzD,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMe,QAAQ,GAAGF,QAAQ,CAACG,MAAM,IAAI,CAAC,CAAC,CAAC;EACvC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACdkB,gBAAgB,CAAC,CAAC;IAClBP,kBAAkB,CAAC,CAAC,CAAC,CAAC;EACxB,CAAC,EAAE,CAACH,eAAe,CAAC,CAAC;EAErB,MAAMU,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,MAAMC,iBAAiB,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGhB,SAAS,CAACG,eAAe,CAAC,CAACD,cAAc,CAACe,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACR,MAAM,CAAC,CAAC;IACzG,MAAMD,QAAQ,GAAGM,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEF,iBAAiB,CAAC;IAC/C,MAAMK,IAAI,GAAGC,KAAK,CAACC,IAAI,CAAC;MAAEX,MAAM,EAAED;IAAS,CAAC,EAAE,MAAMW,KAAK,CAACX,QAAQ,CAAC,CAACa,IAAI,CAAC,EAAE,CAAC,CAAC;IAE7E,MAAMC,cAAc,GAAG,4BAA4B;IAEnDvB,SAAS,CAACG,eAAe,CAAC,CAACD,cAAc,CAACsB,OAAO,CAAEN,IAAI,IAAK;MAC1D,MAAMO,UAAU,GAAGP,IAAI,CAACR,MAAM;MAC9B,IAAIgB,GAAG,EAAEC,GAAG;MACZ,IAAIC,KAAK,GAAG,CAAC;MACb,IAAIC,SAAS;;MAEb;MACAA,SAAS,GAAGd,IAAI,CAACe,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;MAEvC,GAAG;QACDJ,GAAG,GAAGX,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACe,MAAM,CAAC,CAAC,GAAGrB,QAAQ,CAAC;QAC1CkB,GAAG,GAAGZ,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACe,MAAM,CAAC,CAAC,GAAGrB,QAAQ,CAAC;QAC1CmB,KAAK,EAAE;QACP,IAAIA,KAAK,GAAG,GAAG,EAAE,OAAO,CAAC;MAC3B,CAAC,QAAQ,CAACI,YAAY,CAACb,IAAI,EAAEO,GAAG,EAAEC,GAAG,EAAEF,UAAU,EAAEI,SAAS,CAAC;MAE7DI,SAAS,CAACd,IAAI,EAAEO,GAAG,EAAEC,GAAG,EAAET,IAAI,EAAEW,SAAS,CAAC;IAC5C,CAAC,CAAC;IAEFK,cAAc,CAACf,IAAI,EAAEI,cAAc,CAAC;IAEpCY,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEjB,IAAI,CAAC;IAC/BX,WAAW,CAACW,IAAI,CAAC;EACnB,CAAC;EAED,MAAMa,YAAY,GAAGA,CAACb,IAAI,EAAEO,GAAG,EAAEC,GAAG,EAAEjB,MAAM,EAAEmB,SAAS,KAAK;IAC1D,IAAIA,SAAS,KAAK,CAAC,EAAE;MACnB,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3B,MAAM,EAAE2B,CAAC,EAAE,EAAE;QAC/B,IAAIV,GAAG,GAAGU,CAAC,IAAIlB,IAAI,CAACT,MAAM,IAAIiB,GAAG,GAAGU,CAAC,GAAG,CAAC,IAAIlB,IAAI,CAACO,GAAG,CAAC,CAAC,CAACC,GAAG,GAAGU,CAAC,GAAGlB,IAAI,CAACT,MAAM,IAAIS,IAAI,CAACT,MAAM,CAAC,KAAK,EAAE,EAAE;UACpG,OAAO,KAAK;QACd;MACF;IACF,CAAC,MAAM;MACL,KAAK,IAAI2B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3B,MAAM,EAAE2B,CAAC,EAAE,EAAE;QAC/B,IAAIX,GAAG,GAAGW,CAAC,IAAIlB,IAAI,CAACT,MAAM,IAAIgB,GAAG,GAAGW,CAAC,GAAG,CAAC,IAAIlB,IAAI,CAAC,CAACO,GAAG,GAAGW,CAAC,GAAGlB,IAAI,CAACT,MAAM,IAAIS,IAAI,CAACT,MAAM,CAAC,CAACiB,GAAG,CAAC,KAAK,EAAE,EAAE;UACpG,OAAO,KAAK;QACd;MACF;IACF;IAIA,OAAO,IAAI;EACb,CAAC;EAED,MAAMM,SAAS,GAAGA,CAACd,IAAI,EAAEO,GAAG,EAAEC,GAAG,EAAET,IAAI,EAAEW,SAAS,KAAK;IACrD,IAAIA,SAAS,KAAK,CAAC,EAAE;MACnB,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnB,IAAI,CAACR,MAAM,EAAE2B,CAAC,EAAE,EAAE;QACpClB,IAAI,CAACO,GAAG,CAAC,CAAC,CAACC,GAAG,GAAGU,CAAC,GAAGlB,IAAI,CAACT,MAAM,IAAIS,IAAI,CAACT,MAAM,CAAC,GAAGQ,IAAI,CAACmB,CAAC,CAAC;MAC5D;IACF,CAAC,MAAM;MACL,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnB,IAAI,CAACR,MAAM,EAAE2B,CAAC,EAAE,EAAE;QACpClB,IAAI,CAAC,CAACO,GAAG,GAAGW,CAAC,GAAGlB,IAAI,CAACT,MAAM,IAAIS,IAAI,CAACT,MAAM,CAAC,CAACiB,GAAG,CAAC,GAAGT,IAAI,CAACmB,CAAC,CAAC;MAC5D;IACF;EACF,CAAC;EAED,MAAMH,cAAc,GAAGA,CAACf,IAAI,EAAEI,cAAc,KAAK;IAC/C,KAAK,IAAIG,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGP,IAAI,CAACT,MAAM,EAAEgB,GAAG,EAAE,EAAE;MAC1C,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGR,IAAI,CAACO,GAAG,CAAC,CAAChB,MAAM,EAAEiB,GAAG,EAAE,EAAE;QAC/C,IAAIR,IAAI,CAACO,GAAG,CAAC,CAACC,GAAG,CAAC,KAAK,EAAE,EAAE;UACzB,MAAMW,WAAW,GAAGvB,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACe,MAAM,CAAC,CAAC,GAAGP,cAAc,CAACb,MAAM,CAAC;UACrES,IAAI,CAACO,GAAG,CAAC,CAACC,GAAG,CAAC,GAAGJ,cAAc,CAACe,WAAW,CAAC;QAC9C;MACF;IACF;EACF,CAAC;EAED,MAAMC,iBAAiB,GAAGA,CAACb,GAAG,EAAEC,GAAG,KAAK;IACxC,MAAMa,SAAS,GAAGjC,QAAQ,CAACmB,GAAG,CAAC,CAACC,GAAG,CAAC;IACpC,IAAI3B,SAAS,CAACG,eAAe,CAAC,CAACD,cAAc,CAACuC,QAAQ,CAACD,SAAS,CAAC,EAAE;MACjE,MAAME,kBAAkB,GAAG;QAAC,GAAGrC;MAAgB,CAAC;MAChDqC,kBAAkB,CAAE,GAAEhB,GAAI,IAAGC,GAAI,EAAC,CAAC,GAAGa,SAAS;MAC/ClC,kBAAkB,CAACoC,kBAAkB,CAAC;MACtClC,WAAW,CAAEmC,YAAY,IAAK;QAC5B,MAAMC,OAAO,GAAG,CAAC,GAAGD,YAAY,CAAC;QACjCC,OAAO,CAAClB,GAAG,CAAC,CAACC,GAAG,CAAC,GAAG,GAAG;QACvB,OAAOiB,OAAO;MAChB,CAAC,CAAC;MACFhC,eAAe,CAAEiC,gBAAgB,IAAK,CAAC,GAAGA,gBAAgB,EAAG,GAAEnB,GAAI,IAAGC,GAAI,EAAC,CAAC,CAAC;IAC/E;EACF,CAAC;EAEC,MAAMmB,SAAS,GAAGA,CAAA,KAAM;IACtB,MAAMC,YAAY,GAAG/C,SAAS,CAACG,eAAe,CAAC,CAACD,cAAc;IAC9D,MAAM8C,aAAa,GAAGC,MAAM,CAACC,MAAM,CAAC7C,eAAe,CAAC;IACpD,OAAO0C,YAAY,CAACI,KAAK,CAACjC,IAAI,IAAI8B,aAAa,CAACP,QAAQ,CAACvB,IAAI,CAAC,CAAC;EACjE,CAAC;EAED,MAAMkC,mBAAmB,GAAGA,CAAA,KAAM;IAChC,OAAON,SAAS,CAAC,CAAC;EACpB,CAAC;EAED,MAAMO,mBAAmB,GAAGA,CAAA,KAAM;IAChC,OAAOlD,eAAe,GAAG,CAAC;EAC5B,CAAC;EAED,oBACEN,OAAA;IAAKyD,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAClC1D,OAAA;MAAKyD,SAAS,EAAC,qBAAqB;MAAAC,QAAA,eAClC1D,OAAA;QAAIyD,SAAS,EAAC,UAAU;QAAAC,QAAA,EAAEvD,SAAS,CAACG,eAAe,CAAC,CAACF;MAAQ;QAAAuD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChE,CAAC,eACN9D,OAAA;MAAKyD,SAAS,EAAC,gBAAgB;MAAAC,QAAA,eAC7B1D,OAAA;QAAKyD,SAAS,EAAC,WAAW;QAAAC,QAAA,EACvBhD,QAAQ,CAACU,GAAG,CAAC,CAACS,GAAG,EAAEkC,QAAQ,kBAC1B/D,OAAA;UAAoByD,SAAS,EAAC,eAAe;UAAAC,QAAA,EAC1C7B,GAAG,CAACT,GAAG,CAAC,CAAC4C,IAAI,EAAEC,QAAQ,kBACtBjE,OAAA;YAEEyD,SAAS,EAAG,kBAAiBjD,eAAe,CAAE,GAAEuD,QAAS,IAAGE,QAAS,EAAC,CAAC,IAAI9D,SAAS,CAACG,eAAe,CAAC,CAACD,cAAc,CAACuC,QAAQ,CAACoB,IAAI,CAAC,GAAE,SAAS,GAAG,EAAG,IAAGxD,eAAe,CAAE,GAAEuD,QAAS,IAAGE,QAAS,EAAC,CAAC,GAAE,UAAU,GAAG,EAAG,EAAE;YACrNC,OAAO,EAAEA,CAAA,KAAM;cACbxB,iBAAiB,CAACqB,QAAQ,EAAEE,QAAQ,CAAC;cACrC,IAAI9D,SAAS,CAACG,eAAe,CAAC,CAACD,cAAc,CAACuC,QAAQ,CAACoB,IAAI,CAAC,EAAE;gBAC5D;gBACAvD,kBAAkB,CAAE0D,WAAW,KAAM;kBAAC,GAAGA,WAAW;kBAAE,CAAE,GAAEJ,QAAS,IAAGE,QAAS,EAAC,GAAGD;gBAAK,CAAC,CAAC,CAAC;cAC7F;YACF,CAAE;YAAAN,QAAA,EAEDM;UAAI,GAVAC,QAAQ;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAWV,CACN;QAAC,GAfMC,QAAQ;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAgBb,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EACLP,mBAAmB,CAAC,CAAC,iBACpBvD,OAAA;MAAQyD,SAAS,EAAC,aAAa;MAACS,OAAO,EAAEA,CAAA,KAAM3D,kBAAkB,CAACD,eAAe,GAAG,CAAC,CAAE;MAAAoD,QAAA,EAAC;IAExF;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACT,EACAN,mBAAmB,CAAC,CAAC,iBACpBxD,OAAA;MAAQyD,SAAS,EAAC,aAAa;MAACS,OAAO,EAAEA,CAAA,KAAM3D,kBAAkB,CAACD,eAAe,GAAG,CAAC,CAAE;MAAAoD,QAAA,EAAC;IAExF;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACT;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC5D,EAAA,CAvLID,SAAS;AAAAmE,EAAA,GAATnE,SAAS;AAyLf,eAAeA,SAAS;AAAC,IAAAmE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}