{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const questions = [{\n    question: 'São tipos de tecido ósseo?',\n    answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['COMPACTO', 'ESPONJOSO']\n  }, {\n    question: 'Classificação histológica dos ossos',\n    answers: ['Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['IMATURO', 'LAMELAR']\n  }\n  // Adicione o restante das perguntas...\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array.from({\n    length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0)\n  }, () => ''));\n  const [wordGrid, setWordGrid] = useState([]);\n  const [showNextButton, setShowNextButton] = useState(false);\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n  const generateWordGrid = () => {\n    const grid = Array.from({\n      length: 8\n    }, () => Array(8).fill(''));\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    questions[currentQuestion].correctAnswers.forEach(word => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Seleciona uma direção aleatória: horizontal (0) ou vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n      do {\n        row = Math.floor(Math.random() * 8);\n        col = Math.floor(Math.random() * 8);\n        tries++;\n        if (tries > 100) return; // Evita loop infinito\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n      placeWord(grid, row, col, word, direction);\n    });\n\n    // Preenche as células vazias com caracteres aleatórios\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (grid[row][col] === '') {\n          grid[row][col] = availableChars[Math.floor(Math.random() * availableChars.length)];\n        }\n      }\n    }\n    setWordGrid(grid);\n  };\n  const canPlaceWord = (grid, row, col, wordLength, direction) => {\n    // Verifica se a palavra pode ser colocada na grade sem exceder os limites\n    for (let i = 0; i < wordLength; i++) {\n      const newRow = direction === 0 ? row : row + i;\n      const newCol = direction === 0 ? col + i : col;\n      if (newRow < 0 || newRow >= 8 || newCol < 0 || newCol >= 8 || grid[newRow][newCol] !== '') {\n        return false;\n      }\n    }\n    return true;\n  };\n  const placeWord = (grid, row, col, word, direction) => {\n    word.split('').forEach((letter, index) => {\n      const newRow = direction === 0 ? row : row + index;\n      const newCol = direction === 0 ? col + index : col;\n      grid[newRow][newCol] = letter;\n    });\n  };\n  const handleSelectAnswer = index => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[index] = questions[currentQuestion].correctAnswers[index];\n    setSelectedAnswers(newSelectedAnswers);\n    if (questions[currentQuestion].correctAnswers.every((answer, i) => answer === newSelectedAnswers[i])) {\n      setShowNextButton(true);\n    }\n  };\n  const handleNextQuestion = () => {\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n      setSelectedAnswers(Array.from({\n        length: questions[currentQuestion + 1].correctAnswers.reduce((acc, answer) => acc + answer.length, 0)\n      }, () => ''));\n      setShowNextButton(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Questions\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Question\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: questions[currentQuestion].question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"WordGrid\",\n        children: wordGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"WordGridRow\",\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `WordGridCell ${selectedAnswers[rowIndex * 8 + colIndex] ? 'Correct' : ''}`,\n            children: cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Answers\",\n        children: questions[currentQuestion].answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `Answer ${selectedAnswers[index] ? 'Correct' : ''}`,\n          onClick: () => handleSelectAnswer(index),\n          children: answer\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), showNextButton && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"NextButton\",\n        onClick: handleNextQuestion,\n        children: \"Pr\\xF3xima\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"o2rheytiRYtam3ukWlH5AHfdDhk=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Questions","_s","questions","question","answers","correctAnswers","currentQuestion","setCurrentQuestion","selectedAnswers","setSelectedAnswers","Array","from","length","reduce","acc","answer","wordGrid","setWordGrid","showNextButton","setShowNextButton","generateWordGrid","grid","fill","availableChars","forEach","word","wordLength","row","col","tries","direction","Math","random","floor","canPlaceWord","placeWord","i","newRow","newCol","split","letter","index","handleSelectAnswer","newSelectedAnswers","every","handleNextQuestion","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","rowIndex","cell","colIndex","onClick","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  const questions = [\n    {\n      question: 'São tipos de tecido ósseo?',\n      answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['COMPACTO', 'ESPONJOSO']\n    },\n    {\n      question: 'Classificação histológica dos ossos',\n      answers: ['Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['IMATURO', 'LAMELAR']\n    }\n    // Adicione o restante das perguntas...\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array.from({ length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0) }, () => ''));\n  const [wordGrid, setWordGrid] = useState([]);\n  const [showNextButton, setShowNextButton] = useState(false);\n\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n\n  const generateWordGrid = () => {\n    const grid = Array.from({ length: 8 }, () => Array(8).fill(''));\n\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    questions[currentQuestion].correctAnswers.forEach((word) => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Seleciona uma direção aleatória: horizontal (0) ou vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n\n      do {\n        row = Math.floor(Math.random() * 8);\n        col = Math.floor(Math.random() * 8);\n        tries++;\n        if (tries > 100) return; // Evita loop infinito\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n\n      placeWord(grid, row, col, word, direction);\n    });\n\n    // Preenche as células vazias com caracteres aleatórios\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (grid[row][col] === '') {\n          grid[row][col] = availableChars[Math.floor(Math.random() * availableChars.length)];\n        }\n      }\n    }\n\n    setWordGrid(grid);\n  };\n\n  const canPlaceWord = (grid, row, col, wordLength, direction) => {\n    // Verifica se a palavra pode ser colocada na grade sem exceder os limites\n    for (let i = 0; i < wordLength; i++) {\n      const newRow = direction === 0 ? row : row + i;\n      const newCol = direction === 0 ? col + i : col;\n\n      if (newRow < 0 || newRow >= 8 || newCol < 0 || newCol >= 8 || grid[newRow][newCol] !== '') {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  const placeWord = (grid, row, col, word, direction) => {\n    word.split('').forEach((letter, index) => {\n      const newRow = direction === 0 ? row : row + index;\n      const newCol = direction === 0 ? col + index : col;\n      grid[newRow][newCol] = letter;\n    });\n  };\n\n  const handleSelectAnswer = (index) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[index] = questions[currentQuestion].correctAnswers[index];\n    setSelectedAnswers(newSelectedAnswers);\n\n    if (questions[currentQuestion].correctAnswers.every((answer, i) => answer === newSelectedAnswers[i])) {\n      setShowNextButton(true);\n    }\n  };\n\n  const handleNextQuestion = () => {\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n      setSelectedAnswers(Array.from({ length: questions[currentQuestion + 1].correctAnswers.reduce((acc, answer) => acc + answer.length, 0) }, () => ''));\n      setShowNextButton(false);\n    }\n  };\n\n  return (\n    <div className=\"Questions\">\n      <div className=\"Question\">\n        <p>{questions[currentQuestion].question}</p>\n        <div className=\"WordGrid\">\n          {wordGrid.map((row, rowIndex) => (\n            <div key={rowIndex} className=\"WordGridRow\">\n              {row.map((cell, colIndex) => (\n                <div key={colIndex} className={`WordGridCell ${selectedAnswers[rowIndex * 8 + colIndex] ? 'Correct' : ''}`}>\n                  {cell}\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n        <div className=\"Answers\">\n          {questions[currentQuestion].answers.map((answer, index) => (\n            <button key={index} className={`Answer ${selectedAnswers[index] ? 'Correct' : ''}`} onClick={() => handleSelectAnswer(index)}>\n              {answer}\n            </button>\n          ))}\n        </div>\n        {showNextButton && <button className=\"NextButton\" onClick={handleNextQuestion}>Próxima</button>}\n      </div>\n    </div>\n  );\n};\n\nexport default Questions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}