{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const questions = [{\n    question: 'São tipos de tecido osseo?',\n    answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['Compacto', 'Esponjoso']\n  }, {\n    question: 'Classificação histologica dos ossos',\n    answers: ['Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['Imaturo', 'Lamelar']\n  }\n  // Adicione o restante das perguntas...\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showNextButton, setShowNextButton] = useState(false);\n  const [wordGrid, setWordGrid] = useState([]);\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n  const generateWordGrid = () => {\n    const grid = Array.from({\n      length: 13\n    }, () => Array(15).fill(''));\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const correctAnswers = questions[currentQuestion].correctAnswers;\n    correctAnswers.forEach(word => {\n      const wordLength = word.length;\n      let row, col;\n      do {\n        row = Math.floor(Math.random() * 13);\n        col = Math.floor(Math.random() * (15 - wordLength));\n      } while (!canPlaceWord(grid, row, col, wordLength));\n      for (let j = 0; j < wordLength; j++) {\n        grid[row][col + j] = word[j];\n      }\n    });\n\n    // Preenche os espaços vazios com letras aleatórias\n    for (let row = 0; row < 13; row++) {\n      for (let col = 0; col < 15; col++) {\n        if (!grid[row][col]) {\n          grid[row][col] = availableChars[Math.floor(Math.random() * availableChars.length)];\n        }\n      }\n    }\n    setWordGrid(grid);\n  };\n  const canPlaceWord = (grid, row, col, length) => {\n    for (let j = 0; j < length; j++) {\n      if (grid[row][col + j]) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const handleAnswerClick = answer => {\n    setSelectedAnswer(answer);\n    setShowNextButton(true);\n  };\n  const handleNextButtonClick = () => {\n    setSelectedAnswer(null);\n    setShowNextButton(false);\n    setCurrentQuestion(currentQuestion + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"question\",\n      children: questions[currentQuestion].question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-grid\",\n      children: wordGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-grid-row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `word-grid-cell ${correctCell(rowIndex, colIndex) ? 'correct' : ''}`,\n          onClick: () => correctCell(rowIndex, colIndex) && handleAnswerClick(cell),\n          children: cell\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), showNextButton && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: handleNextButtonClick,\n      children: \"Pr\\xF3xima\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"tGaizY31PYjchLidNbBURwYh6y4=\");\n_c = Questions;\nconst correctCell = (rowIndex, colIndex) => {\n  // Adicione a lógica para determinar se a célula é parte da palavra correta\n  // Neste exemplo, a célula é considerada correta se estiver na linha onde a palavra correta foi posicionada\n  return rowIndex === 6;\n};\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Questions","_s","questions","question","answers","correctAnswers","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","showNextButton","setShowNextButton","wordGrid","setWordGrid","generateWordGrid","grid","Array","from","length","fill","availableChars","forEach","word","wordLength","row","col","Math","floor","random","canPlaceWord","j","handleAnswerClick","answer","handleNextButtonClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","rowIndex","cell","colIndex","correctCell","onClick","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  const questions = [\n    {\n      question: 'São tipos de tecido osseo?',\n      answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['Compacto', 'Esponjoso']\n    },\n    {\n      question: 'Classificação histologica dos ossos',\n      answers: ['Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['Imaturo', 'Lamelar']\n    }\n    // Adicione o restante das perguntas...\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showNextButton, setShowNextButton] = useState(false);\n  const [wordGrid, setWordGrid] = useState([]);\n\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n\n  const generateWordGrid = () => {\n    const grid = Array.from({ length: 13 }, () => Array(15).fill(''));\n\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const correctAnswers = questions[currentQuestion].correctAnswers;\n\n    correctAnswers.forEach((word) => {\n      const wordLength = word.length;\n      let row, col;\n      do {\n        row = Math.floor(Math.random() * 13);\n        col = Math.floor(Math.random() * (15 - wordLength));\n      } while (!canPlaceWord(grid, row, col, wordLength));\n\n      for (let j = 0; j < wordLength; j++) {\n        grid[row][col + j] = word[j];\n      }\n    });\n\n    // Preenche os espaços vazios com letras aleatórias\n    for (let row = 0; row < 13; row++) {\n      for (let col = 0; col < 15; col++) {\n        if (!grid[row][col]) {\n          grid[row][col] = availableChars[Math.floor(Math.random() * availableChars.length)];\n        }\n      }\n    }\n\n    setWordGrid(grid);\n  };\n\n  const canPlaceWord = (grid, row, col, length) => {\n    for (let j = 0; j < length; j++) {\n      if (grid[row][col + j]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const handleAnswerClick = (answer) => {\n    setSelectedAnswer(answer);\n    setShowNextButton(true);\n  };\n\n  const handleNextButtonClick = () => {\n    setSelectedAnswer(null);\n    setShowNextButton(false);\n    setCurrentQuestion(currentQuestion + 1);\n  };\n\n  return (\n    <div className=\"questions-container\">\n      <h2 className=\"question\">{questions[currentQuestion].question}</h2>\n      <div className=\"word-grid\">\n        {wordGrid.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"word-grid-row\">\n            {row.map((cell, colIndex) => (\n              <div\n                key={colIndex}\n                className={`word-grid-cell ${correctCell(rowIndex, colIndex) ? 'correct' : ''}`}\n                onClick={() => correctCell(rowIndex, colIndex) && handleAnswerClick(cell)}\n              >\n                {cell}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n      {showNextButton && (\n        <button className=\"next-button\" onClick={handleNextButtonClick}>Próxima</button>\n      )}\n    </div>\n  );\n};\n\nconst correctCell = (rowIndex, colIndex) => {\n  // Adicione a lógica para determinar se a célula é parte da palavra correta\n  // Neste exemplo, a célula é considerada correta se estiver na linha onde a palavra correta foi posicionada\n  return rowIndex === 6;\n};\n\nexport default Questions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}