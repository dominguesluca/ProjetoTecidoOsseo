{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const questions = [{\n    question: 'São tipos de tecido osseo?',\n    answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['Compacto', 'Esponjoso']\n  }, {\n    question: 'Classificação histologica dos ossos',\n    answers: ['Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['Imaturo', 'Lamelar']\n  }\n  // Adicione o restante das perguntas...\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showNextButton, setShowNextButton] = useState(false);\n  const [wordGrid, setWordGrid] = useState([]);\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n  const generateWordGrid = () => {\n    const grid = [];\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'; // Lista de letras maiúsculas\n\n    // Inicializa a matriz com caracteres aleatórios\n    for (let i = 0; i < 15; i++) {\n      const row = [];\n      for (let j = 0; j < 15; j++) {\n        const randomIndex = Math.floor(Math.random() * characters.length);\n        const randomChar = characters[randomIndex];\n        row.push(randomChar);\n      }\n      grid.push(row);\n    }\n\n    // Preenche as palavras na matriz\n    questions[currentQuestion].answers.forEach(answer => {\n      let placed = false;\n      let tries = 0;\n      const maxTries = 100; // Número máximo de tentativas\n\n      while (!placed && tries < maxTries) {\n        const direction = Math.random() < 0.5 ? 'horizontal' : 'vertical'; // Seleciona aleatoriamente a direção da palavra\n\n        let row, col;\n        if (direction === 'horizontal') {\n          row = Math.floor(Math.random() * 15);\n          col = Math.floor(Math.random() * (15 - answer.length + 1));\n        } else {\n          row = Math.floor(Math.random() * (15 - answer.length + 1));\n          col = Math.floor(Math.random() * 15);\n        }\n        let canPlace = true;\n        for (let i = 0; i < answer.length; i++) {\n          if (direction === 'horizontal' && grid[row][col + i] !== '') {\n            canPlace = false;\n            break;\n          } else if (direction === 'vertical' && grid[row + i][col] !== '') {\n            canPlace = false;\n            break;\n          }\n        }\n        if (canPlace) {\n          for (let i = 0; i < answer.length; i++) {\n            if (direction === 'horizontal') {\n              grid[row][col + i] = answer[i];\n            } else {\n              grid[row + i][col] = answer[i];\n            }\n          }\n          placed = true;\n        }\n        tries++;\n      }\n    });\n    setWordGrid(grid);\n  };\n  const handleAnswerClick = answer => {\n    setSelectedAnswer(answer);\n    setShowNextButton(true);\n  };\n  const handleNextButtonClick = () => {\n    setSelectedAnswer(null);\n    setShowNextButton(false);\n    setCurrentQuestion(currentQuestion + 1);\n  };\n  const handleTouchStart = answer => {\n    setSelectedAnswer(answer);\n  };\n  const handleTouchEnd = () => {\n    setShowNextButton(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"question\",\n      children: questions[currentQuestion].question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-grid\",\n      children: wordGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-grid-row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-grid-cell\",\n          children: cell\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answers-container\",\n      children: questions[currentQuestion].answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `answer ${selectedAnswer === answer ? 'selected' : ''}`,\n        onClick: () => handleAnswerClick(answer),\n        onTouchStart: () => handleTouchStart(answer),\n        onTouchEnd: handleTouchEnd,\n        children: answer\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), showNextButton && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: handleNextButtonClick,\n      children: \"Pr\\xF3xima\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"tGaizY31PYjchLidNbBURwYh6y4=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Questions","_s","questions","question","answers","correctAnswers","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","showNextButton","setShowNextButton","wordGrid","setWordGrid","generateWordGrid","grid","characters","i","row","j","randomIndex","Math","floor","random","length","randomChar","push","forEach","answer","placed","tries","maxTries","direction","col","canPlace","handleAnswerClick","handleNextButtonClick","handleTouchStart","handleTouchEnd","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","rowIndex","cell","colIndex","index","onClick","onTouchStart","onTouchEnd","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  const questions = [\n    {\n      question: 'São tipos de tecido osseo?',\n      answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['Compacto', 'Esponjoso']\n    },\n    {\n      question: 'Classificação histologica dos ossos',\n      answers: ['Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['Imaturo', 'Lamelar']\n    }\n    // Adicione o restante das perguntas...\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showNextButton, setShowNextButton] = useState(false);\n  const [wordGrid, setWordGrid] = useState([]);\n\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n\n  const generateWordGrid = () => {\n    const grid = [];\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'; // Lista de letras maiúsculas\n\n    // Inicializa a matriz com caracteres aleatórios\n    for (let i = 0; i < 15; i++) {\n      const row = [];\n      for (let j = 0; j < 15; j++) {\n        const randomIndex = Math.floor(Math.random() * characters.length);\n        const randomChar = characters[randomIndex];\n        row.push(randomChar);\n      }\n      grid.push(row);\n    }\n\n    // Preenche as palavras na matriz\n    questions[currentQuestion].answers.forEach((answer) => {\n      let placed = false;\n      let tries = 0;\n      const maxTries = 100; // Número máximo de tentativas\n\n      while (!placed && tries < maxTries) {\n        const direction = Math.random() < 0.5 ? 'horizontal' : 'vertical'; // Seleciona aleatoriamente a direção da palavra\n\n        let row, col;\n        if (direction === 'horizontal') {\n          row = Math.floor(Math.random() * 15);\n          col = Math.floor(Math.random() * (15 - answer.length + 1));\n        } else {\n          row = Math.floor(Math.random() * (15 - answer.length + 1));\n          col = Math.floor(Math.random() * 15);\n        }\n\n        let canPlace = true;\n        for (let i = 0; i < answer.length; i++) {\n          if (direction === 'horizontal' && grid[row][col + i] !== '') {\n            canPlace = false;\n            break;\n          } else if (direction === 'vertical' && grid[row + i][col] !== '') {\n            canPlace = false;\n            break;\n          }\n        }\n\n        if (canPlace) {\n          for (let i = 0; i < answer.length; i++) {\n            if (direction === 'horizontal') {\n              grid[row][col + i] = answer[i];\n            } else {\n              grid[row + i][col] = answer[i];\n            }\n          }\n          placed = true;\n        }\n\n        tries++;\n      }\n    });\n\n    setWordGrid(grid);\n  };\n\n  const handleAnswerClick = (answer) => {\n    setSelectedAnswer(answer);\n    setShowNextButton(true);\n  };\n\n  const handleNextButtonClick = () => {\n    setSelectedAnswer(null);\n    setShowNextButton(false);\n    setCurrentQuestion(currentQuestion + 1);\n  };\n\n  const handleTouchStart = (answer) => {\n    setSelectedAnswer(answer);\n  };\n\n  const handleTouchEnd = () => {\n    setShowNextButton(true);\n  };\n\n  return (\n    <div className=\"questions-container\">\n      <h2 className=\"question\">{questions[currentQuestion].question}</h2>\n      <div className=\"word-grid\">\n        {wordGrid.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"word-grid-row\">\n            {row.map((cell, colIndex) => (\n              <div key={colIndex} className=\"word-grid-cell\">{cell}</div>\n            ))}\n          </div>\n        ))}\n      </div>\n      <div className=\"answers-container\">\n        {questions[currentQuestion].answers.map((answer, index) => (\n          <div\n            key={index}\n            className={`answer ${selectedAnswer === answer ? 'selected' : ''}`}\n            onClick={() => handleAnswerClick(answer)}\n            onTouchStart={() => handleTouchStart(answer)}\n            onTouchEnd={handleTouchEnd}\n          >\n            {answer}\n          </div>\n        ))}\n      </div>\n      {showNextButton && (\n        <button className=\"next-button\" onClick={handleNextButtonClick}>Próxima</button>\n      )}\n    </div>\n  );\n};\n\nexport default Questions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}