{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const questions = [{\n    question: 'São tipos de tecido ósseo?',\n    answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['COMPACTO', 'ESPONJOSO']\n  }, {\n    question: 'Classificação histológica dos ossos',\n    answers: ['Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['IMATURO', 'LAMELAR']\n  }\n  // Adicione o restante das perguntas...\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array.from({\n    length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0)\n  }, () => ''));\n  const [showNextButton, setShowNextButton] = useState(false);\n  const [wordGrid, setWordGrid] = useState([]);\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n  useEffect(() => {\n    console.log('Selected Answers:', selectedAnswers);\n    const allLettersSelected = selectedAnswers.every(answer => answer !== '');\n    setShowNextButton(allLettersSelected);\n  }, [selectedAnswers]);\n  const generateWordGrid = () => {\n    const grid = Array.from({\n      length: 8\n    }, () => Array(8).fill(''));\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    questions[currentQuestion].correctAnswers.forEach(word => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Seleciona uma direção aleatória: horizontal (0) ou vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n      do {\n        row = Math.floor(Math.random() * 8);\n        col = Math.floor(Math.random() * 8);\n        tries++;\n        if (tries > 100) return; // Evita loop infinito\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n      placeWord(grid, row, col, word, direction);\n    });\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0 && col + length > 8) return false; // Fora dos limites na horizontal\n    if (direction === 1 && row + length > 8) return false; // Fora dos limites na vertical\n\n    for (let i = 0; i < length; i++) {\n      if (direction === 0 && grid[row][col + i] !== '') return false; // Colisão na horizontal\n      if (direction === 1 && grid[row + i][col] !== '') return false; // Colisão na vertical\n    }\n    return true;\n  };\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][col + i] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[row + i][col] = word[i];\n      }\n    }\n  };\n  const handleAnswerClick = (row, col) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[row * 8 + col] = wordGrid[row][col];\n    setSelectedAnswers(newSelectedAnswers);\n    console.log('Clicked Answer:', wordGrid[row][col]);\n  };\n  const checkWord = () => {\n    const selectedWord = selectedAnswers.join('');\n    const correctWords = questions[currentQuestion].correctAnswers;\n    const isCorrect = correctWords.some(word => word === selectedWord);\n    console.log('Selected Word:', selectedWord);\n    console.log('Correct Words:', correctWords);\n    console.log('Is Correct:', isCorrect);\n    return isCorrect;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-background\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"question\",\n        children: questions[currentQuestion].question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-grid\",\n        children: wordGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-grid-row\",\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `word-grid-cell ${cell && selectedAnswers[rowIndex * 8 + colIndex] ? 'selected' : ''}`,\n            onClick: () => handleAnswerClick(rowIndex, colIndex),\n            children: cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), showNextButton && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: () => setCurrentQuestion(currentQuestion + 1),\n      disabled: !checkWord(),\n      children: \"Pr\\xF3xima\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"rOdpz654l0EoUVVqN22gJCPxibk=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Questions","_s","questions","question","answers","correctAnswers","currentQuestion","setCurrentQuestion","selectedAnswers","setSelectedAnswers","Array","from","length","reduce","acc","answer","showNextButton","setShowNextButton","wordGrid","setWordGrid","generateWordGrid","console","log","allLettersSelected","every","grid","fill","availableChars","forEach","word","wordLength","row","col","tries","direction","Math","random","floor","canPlaceWord","placeWord","i","handleAnswerClick","newSelectedAnswers","checkWord","selectedWord","join","correctWords","isCorrect","some","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","rowIndex","cell","colIndex","onClick","disabled","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  const questions = [\n    {\n      question: 'São tipos de tecido ósseo?',\n      answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['COMPACTO', 'ESPONJOSO']\n    },\n    {\n      question: 'Classificação histológica dos ossos',\n      answers: ['Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['IMATURO', 'LAMELAR']\n    }\n    // Adicione o restante das perguntas...\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array.from({ length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0) }, () => ''));\n  const [showNextButton, setShowNextButton] = useState(false);\n  const [wordGrid, setWordGrid] = useState([]);\n\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n\n  useEffect(() => {\n    console.log('Selected Answers:', selectedAnswers);\n    const allLettersSelected = selectedAnswers.every(answer => answer !== '');\n    setShowNextButton(allLettersSelected);\n  }, [selectedAnswers]);\n\n  const generateWordGrid = () => {\n    const grid = Array.from({ length: 8 }, () => Array(8).fill(''));\n\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    questions[currentQuestion].correctAnswers.forEach((word) => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Seleciona uma direção aleatória: horizontal (0) ou vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n\n      do {\n        row = Math.floor(Math.random() * 8);\n        col = Math.floor(Math.random() * 8);\n        tries++;\n        if (tries > 100) return; // Evita loop infinito\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n\n      placeWord(grid, row, col, word, direction);\n    });\n\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0 && col + length > 8) return false; // Fora dos limites na horizontal\n    if (direction === 1 && row + length > 8) return false; // Fora dos limites na vertical\n\n    for (let i = 0; i < length; i++) {\n      if (direction === 0 && grid[row][col + i] !== '') return false; // Colisão na horizontal\n      if (direction === 1 && grid[row + i][col] !== '') return false; // Colisão na vertical\n    }\n\n    return true;\n  };\n\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][col + i] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[row + i][col] = word[i];\n      }\n    }\n  };\n\n  const handleAnswerClick = (row, col) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[row * 8 + col] = wordGrid[row][col];\n    setSelectedAnswers(newSelectedAnswers);\n    console.log('Clicked Answer:', wordGrid[row][col]);\n  };\n\n  const checkWord = () => {\n    const selectedWord = selectedAnswers.join('');\n    const correctWords = questions[currentQuestion].correctAnswers;\n    const isCorrect = correctWords.some(word => word === selectedWord);\n    console.log('Selected Word:', selectedWord);\n    console.log('Correct Words:', correctWords);\n    console.log('Is Correct:', isCorrect);\n    return isCorrect;\n  };\n\n  return (\n    <div className=\"questions-container\">\n      <div className=\"question-background\">\n        <h2 className=\"question\">{questions[currentQuestion].question}</h2>\n      </div>\n      <div className=\"grid-container\">\n        <div className=\"word-grid\">\n          {wordGrid.map((row, rowIndex) => (\n            <div key={rowIndex} className=\"word-grid-row\">\n              {row.map((cell, colIndex) => (\n                <div\n                  key={colIndex}\n                  className={`word-grid-cell ${cell && selectedAnswers[rowIndex * 8 + colIndex] ? 'selected' : ''}`}\n                  onClick={() => handleAnswerClick(rowIndex, colIndex)}\n                >\n                  {cell}\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n      {showNextButton && (\n        <button className=\"next-button\" onClick={() => setCurrentQuestion(currentQuestion + 1)} disabled={!checkWord()}>\n          Próxima\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Questions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}