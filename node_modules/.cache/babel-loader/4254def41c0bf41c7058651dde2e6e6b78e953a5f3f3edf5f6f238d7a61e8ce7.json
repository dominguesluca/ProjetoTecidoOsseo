{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const questions = [{\n    question: 'São tipos de tecido ósseo?',\n    answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['COMPACTO', 'ESPONJOSO']\n  }, {\n    question: 'Classificação histológica dos ossos',\n    answers: ['Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['IMATURO', 'LAMELAR']\n  }\n  // Adicione o restante das perguntas...\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array.from({\n    length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0)\n  }, () => ''));\n  const [wordGrid, setWordGrid] = useState([]);\n  const [showCorrectWord, setShowCorrectWord] = useState(false);\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n  const generateWordGrid = () => {\n    const grid = Array.from({\n      length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => Math.max(acc, answer.length), 0)\n    }, () => Array(questions[currentQuestion].correctAnswers.length).fill(''));\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    questions[currentQuestion].correctAnswers.forEach((word, wordIndex) => {\n      let row, col;\n      let tries = 0;\n      do {\n        row = Math.floor(Math.random() * grid.length);\n        col = Math.floor(Math.random() * grid[row].length);\n        tries++;\n        if (tries > 100) return; // Evita loop infinito\n      } while (!canPlaceWord(grid, row, col, word.length));\n      placeWord(grid, row, col, word);\n    });\n\n    // Preenche as células vazias com caracteres aleatórios\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[row].length; col++) {\n        if (!grid[row][col]) {\n          grid[row][col] = availableChars[Math.floor(Math.random() * availableChars.length)];\n        }\n      }\n    }\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n  const canPlaceWord = (grid, row, col, length) => {\n    if (row + length > grid.length) return false; // Fora dos limites na horizontal\n    if (col + length > grid[row].length) return false; // Fora dos limites na vertical\n\n    for (let i = 0; i < length; i++) {\n      if (grid[row + i][col + i]) return false; // Célula ocupada na diagonal\n      if (grid[row + i][col - i]) return false; // Célula ocupada na diagonal oposta\n    }\n    return true;\n  };\n  const placeWord = (grid, row, col, word) => {\n    word.split('').forEach((char, index) => {\n      grid[row + index][col + index] = char;\n    });\n  };\n  const handleAnswerClick = (row, col) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[row * wordGrid[0].length + col] = wordGrid[row][col];\n    setSelectedAnswers(newSelectedAnswers);\n    if (questions[currentQuestion].correctAnswers.join('') === newSelectedAnswers.join('')) {\n      setShowCorrectWord(true);\n    }\n  };\n  const handleNextQuestionClick = () => {\n    setCurrentQuestion(currentQuestion + 1);\n    setSelectedAnswers(Array.from({\n      length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0)\n    }, () => ''));\n    setShowCorrectWord(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question\",\n      children: questions[currentQuestion].question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-grid\",\n      children: wordGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-grid-row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `word-grid-cell ${selectedAnswers[rowIndex * wordGrid[0].length + colIndex] ? 'selected' : ''}`,\n          onClick: () => handleAnswerClick(rowIndex, colIndex),\n          children: wordGrid[rowIndex][colIndex]\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answers\",\n      children: questions[currentQuestion].answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"answer-button\",\n        children: answer\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), showCorrectWord && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"correct-word\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Resposta correta:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), \" \", questions[currentQuestion].correctAnswers.join(' ')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-question-button\",\n      onClick: handleNextQuestionClick,\n      children: \"Pr\\xF3xima pergunta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"vq876tZcjtQtKWEWQOvkYrr3hls=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Questions","_s","questions","question","answers","correctAnswers","currentQuestion","setCurrentQuestion","selectedAnswers","setSelectedAnswers","Array","from","length","reduce","acc","answer","wordGrid","setWordGrid","showCorrectWord","setShowCorrectWord","generateWordGrid","grid","Math","max","fill","availableChars","forEach","word","wordIndex","row","col","tries","floor","random","canPlaceWord","placeWord","console","log","i","split","char","index","handleAnswerClick","newSelectedAnswers","join","handleNextQuestionClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","rowIndex","cell","colIndex","onClick","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  const questions = [\n    {\n      question: 'São tipos de tecido ósseo?',\n      answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['COMPACTO', 'ESPONJOSO']\n    },\n    {\n      question: 'Classificação histológica dos ossos',\n      answers: ['Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['IMATURO', 'LAMELAR']\n    }\n    // Adicione o restante das perguntas...\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array.from({ length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0) }, () => ''));\n  const [wordGrid, setWordGrid] = useState([]);\n  const [showCorrectWord, setShowCorrectWord] = useState(false);\n\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n\n  const generateWordGrid = () => {\n    const grid = Array.from({ length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => Math.max(acc, answer.length), 0) }, () => Array(questions[currentQuestion].correctAnswers.length).fill(''));\n\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    questions[currentQuestion].correctAnswers.forEach((word, wordIndex) => {\n      let row, col;\n      let tries = 0;\n\n      do {\n        row = Math.floor(Math.random() * grid.length);\n        col = Math.floor(Math.random() * grid[row].length);\n        tries++;\n        if (tries > 100) return; // Evita loop infinito\n      } while (!canPlaceWord(grid, row, col, word.length));\n\n      placeWord(grid, row, col, word);\n    });\n\n    // Preenche as células vazias com caracteres aleatórios\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[row].length; col++) {\n        if (!grid[row][col]) {\n          grid[row][col] = availableChars[Math.floor(Math.random() * availableChars.length)];\n        }\n      }\n    }\n\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n\n  const canPlaceWord = (grid, row, col, length) => {\n    if (row + length > grid.length) return false; // Fora dos limites na horizontal\n    if (col + length > grid[row].length) return false; // Fora dos limites na vertical\n\n    for (let i = 0; i < length; i++) {\n      if (grid[row + i][col + i]) return false; // Célula ocupada na diagonal\n      if (grid[row + i][col - i]) return false; // Célula ocupada na diagonal oposta\n    }\n\n    return true;\n  };\n\n  const placeWord = (grid, row, col, word) => {\n    word.split('').forEach((char, index) => {\n      grid[row + index][col + index] = char;\n    });\n  };\n\n  const handleAnswerClick = (row, col) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[row * wordGrid[0].length + col] = wordGrid[row][col];\n    setSelectedAnswers(newSelectedAnswers);\n\n    if (questions[currentQuestion].correctAnswers.join('') === newSelectedAnswers.join('')) {\n      setShowCorrectWord(true);\n    }\n  };\n\n  const handleNextQuestionClick = () => {\n    setCurrentQuestion(currentQuestion + 1);\n    setSelectedAnswers(Array.from({ length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0) }, () => ''));\n    setShowCorrectWord(false);\n  };\n\n  return (\n    <div className=\"questions\">\n      <div className=\"question\">\n        {questions[currentQuestion].question}\n      </div>\n      <div className=\"word-grid\">\n        {wordGrid.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"word-grid-row\">\n            {row.map((cell, colIndex) => (\n              <button\n                key={colIndex}\n                className={`word-grid-cell ${selectedAnswers[rowIndex * wordGrid[0].length + colIndex] ? 'selected' : ''}`}\n                onClick={() => handleAnswerClick(rowIndex, colIndex)}\n              >\n                {wordGrid[rowIndex][colIndex]}\n              </button>\n            ))}\n          </div>\n        ))}\n      </div>\n      <div className=\"answers\">\n        {questions[currentQuestion].answers.map((answer, index) => (\n          <button key={index} className=\"answer-button\">\n            {answer}\n          </button>\n        ))}\n      </div>\n      {showCorrectWord && (\n        <div className=\"correct-word\">\n          <strong>Resposta correta:</strong> {questions[currentQuestion].correctAnswers.join(' ')}\n        </div>\n      )}\n      <button className=\"next-question-button\" onClick={handleNextQuestionClick}>Próxima pergunta</button>\n    </div>\n  );\n};\n\nexport default Questions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}