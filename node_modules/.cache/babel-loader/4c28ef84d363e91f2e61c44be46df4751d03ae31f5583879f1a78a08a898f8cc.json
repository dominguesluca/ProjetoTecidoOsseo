{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const questions = [{\n    question: 'São tipos de tecido ósseo?',\n    answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['COMPACTO', 'ESPONJOSO']\n  }, {\n    question: 'Classificação histológica dos ossos',\n    answers: ['Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['IMATURO', 'LAMELAR']\n  }\n  // Adicione o restante das perguntas...\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array.from({\n    length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0)\n  }, () => ''));\n  const [wordGrid, setWordGrid] = useState([]);\n  const gridSize = wordGrid.length || 8; // Set gridSize to the actual grid length or 8 if it's not defined yet\n\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n  const generateWordGrid = () => {\n    const longestWordLength = Math.max(...questions[currentQuestion].correctAnswers.map(word => word.length));\n    const gridSize = Math.max(8, longestWordLength);\n    const grid = Array.from({\n      length: gridSize\n    }, () => Array(gridSize).fill(''));\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    questions[currentQuestion].correctAnswers.forEach(word => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Seleciona uma direção aleatória: horizontal (0) ou vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n      do {\n        row = Math.floor(Math.random() * gridSize);\n        col = Math.floor(Math.random() * gridSize);\n        tries++;\n        if (tries > 100) return; // Evita loop infinito\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n      placeWord(grid, row, col, word, direction);\n    });\n    fillEmptyCells(grid, availableChars);\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < length; i++) {\n        if (col + i >= grid.length || col + i < 0 || grid[row][(col + i + grid.length) % grid.length] !== '') {\n          return false;\n        }\n      }\n    } else {\n      for (let i = 0; i < length; i++) {\n        if (row + i >= grid.length || row + i < 0 || grid[(row + i + grid.length) % grid.length][col] !== '') {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][(col + i + grid.length) % grid.length] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[(row + i + grid.length) % grid.length][col] = word[i];\n      }\n    }\n  };\n  const fillEmptyCells = (grid, availableChars) => {\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid.length; col++) {\n        if (grid[row][col] === '') {\n          const randomIndex = Math.floor(Math.random() * availableChars.length);\n          grid[row][col] = availableChars[randomIndex];\n        }\n      }\n    }\n  };\n\n  // Restante da função...\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Questions\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"CNaEWSNE3WXb81fhPUrAUglmQmE=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Questions","_s","questions","question","answers","correctAnswers","currentQuestion","setCurrentQuestion","selectedAnswers","setSelectedAnswers","Array","from","length","reduce","acc","answer","wordGrid","setWordGrid","gridSize","generateWordGrid","longestWordLength","Math","max","map","word","grid","fill","availableChars","forEach","wordLength","row","col","tries","direction","random","floor","canPlaceWord","placeWord","fillEmptyCells","console","log","i","randomIndex","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  const questions = [\n    {\n      question: 'São tipos de tecido ósseo?',\n      answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['COMPACTO', 'ESPONJOSO']\n    },\n    {\n      question: 'Classificação histológica dos ossos',\n      answers: ['Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['IMATURO', 'LAMELAR']\n    }\n    // Adicione o restante das perguntas...\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array.from({ length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0) }, () => ''));\n  const [wordGrid, setWordGrid] = useState([]);\n  const gridSize = wordGrid.length || 8; // Set gridSize to the actual grid length or 8 if it's not defined yet\n\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n\n  const generateWordGrid = () => {\n    const longestWordLength = Math.max(...questions[currentQuestion].correctAnswers.map(word => word.length));\n    const gridSize = Math.max(8, longestWordLength);\n    const grid = Array.from({ length: gridSize }, () => Array(gridSize).fill(''));\n\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    questions[currentQuestion].correctAnswers.forEach((word) => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Seleciona uma direção aleatória: horizontal (0) ou vertical (1)\n      direction = Math.random() < 0.5? 0 : 1;\n\n      do {\n        row = Math.floor(Math.random() * gridSize);\n        col = Math.floor(Math.random() * gridSize);\n        tries++;\n        if (tries > 100) return; // Evita loop infinito\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n\n      placeWord(grid, row, col, word, direction);\n    });\n\n    fillEmptyCells(grid, availableChars);\n\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < length; i++) {\n        if (col + i >= grid.length || col + i < 0 || grid[row][(col + i + grid.length) % grid.length] !== '') {\n          return false;\n        }\n      }\n    } else {\n      for (let i = 0; i < length; i++) {\n        if (row + i >= grid.length || row + i < 0 || grid[(row + i + grid.length) % grid.length][col] !== '') {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][(col + i + grid.length) % grid.length] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[(row + i + grid.length) % grid.length][col] = word[i];\n      }\n    }\n  };\n\n  const fillEmptyCells = (grid, availableChars) => {\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid.length; col++) {\n        if (grid[row][col] === '') {\n          const randomIndex = Math.floor(Math.random() * availableChars.length);\n          grid[row][col] = availableChars[randomIndex];\n        }\n      }\n    }\n  };\n\n  // Restante da função...\n\n  return (\n    <div className=\"Questions\">\n      {/* Renderize o jogo aqui */}\n    </div>\n  );\n};\n\nexport default Questions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}