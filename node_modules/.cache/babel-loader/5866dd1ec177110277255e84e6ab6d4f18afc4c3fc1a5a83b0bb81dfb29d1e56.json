{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const questions = [{\n    question: 'São tipos de tecido ósseo?',\n    correctAnswers: ['COMPACTO', 'ESPONJOSO']\n  }, {\n    question: 'Classificação histológica dos ossos',\n    correctAnswers: ['IMATURO', 'LAMELAR']\n  }\n  // Add the rest of the questions...\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [wordGrid, setWordGrid] = useState([]);\n  const gridSize = wordGrid.length || 8; // Set gridSize to the actual grid length or 8 if it's not defined yet\n\n  useEffect(() => {\n    generateWordGrid();\n    setSelectedAnswers(Array(gridSize * gridSize).fill(''));\n  }, [currentQuestion]);\n  const generateWordGrid = () => {\n    const gridSize = Math.max(8, questions[currentQuestion].correctAnswers[0].length);\n    const grid = Array.from({\n      length: gridSize\n    }, () => Array(gridSize).fill(''));\n    questions[currentQuestion].correctAnswers.forEach((word, index) => {\n      let direction;\n      let wordLength = word.length;\n      let row, col;\n      do {\n        row = Math.floor(Math.random() * gridSize);\n        col = Math.floor(Math.random() * gridSize);\n        direction = Math.random() < 0.5 ? 0 : 1;\n      } while (!canPlaceWord(grid, row, col, direction, wordLength));\n      placeWord(grid, row, col, direction, wordLength);\n    });\n    setWordGrid(grid);\n  };\n  const canPlaceWord = (grid, row, col, direction) => {\n    const wordLength = questions[currentQuestion].correctAnswers.length;\n    if (direction === 0) {\n      for (let i = 0; i < wordLength; i++) {\n        if (col + i >= grid.length || col + i < 0 || grid[row][(col + i + grid.length) % grid.length] !== '') {\n          return false;\n        }\n      }\n    } else {\n      for (let i = 0; i < wordLength; i++) {\n        if (row + i >= grid.length || row + i < 0 || grid[(row + i + grid.length) % grid.length][col] !== '') {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  const placeWord = (grid, row, col, direction, wordLength) => {\n    if (direction === 0) {\n      for (let i = 0; i < wordLength; i++) {\n        grid[row][(col + i + grid.length) % grid.length] = questions[currentQuestion].correctAnswers[i];\n      }\n    } else {\n      for (let i = 0; i < wordLength; i++) {\n        grid[(row + i + grid.length) % grid.length][col] = questions[currentQuestion].correctAnswers[i];\n      }\n    }\n  };\n  const handleSubmit = () => {\n    // Validate selected answers...\n  };\n  const handleSelect = (row, col) => {\n    // Create a copy of the selectedAnswers array\n    const newSelectedAnswers = [...selectedAnswers];\n\n    // Check if the cell is empty or already selected\n    if (wordGrid[row][col] && !newSelectedAnswers[row * gridSize + col]) {\n      // Toggle the selection\n      newSelectedAnswers[row * gridSize + col] = wordGrid[row][col];\n    } else if (!wordGrid[row][col] && newSelectedAnswers[row * gridSize + col]) {\n      // Deselect the answer\n      newSelectedAnswers[row * gridSize + col] = '';\n    }\n\n    // Update the selectedAnswers state\n    setSelectedAnswers(newSelectedAnswers);\n  };\n  const renderWordGrid = () => {\n    return wordGrid.map((row, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row.map((cell, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `grid-cell ${selectedAnswers[i * gridSize + j] ? 'selected' : ''}`,\n        onClick: () => handleSelect(i, j),\n        children: cell || ' '\n      }, j, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this))\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Questions\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-grid\",\n      children: renderWordGrid()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Enviar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"LkrvxyJwfLfuzBCQrOZW0sUSyF8=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Questions","_s","questions","question","correctAnswers","currentQuestion","setCurrentQuestion","selectedAnswers","setSelectedAnswers","wordGrid","setWordGrid","gridSize","length","generateWordGrid","Array","fill","Math","max","grid","from","forEach","word","index","direction","wordLength","row","col","floor","random","canPlaceWord","placeWord","i","handleSubmit","handleSelect","newSelectedAnswers","renderWordGrid","map","className","children","cell","j","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  const questions = [\n    {\n      question: 'São tipos de tecido ósseo?',\n      correctAnswers: ['COMPACTO', 'ESPONJOSO']\n    },\n    {\n      question: 'Classificação histológica dos ossos',\n      correctAnswers: ['IMATURO', 'LAMELAR']\n    }\n    // Add the rest of the questions...\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [wordGrid, setWordGrid] = useState([]);\n  const gridSize = wordGrid.length || 8; // Set gridSize to the actual grid length or 8 if it's not defined yet\n\n  useEffect(() => {\n    generateWordGrid();\n    setSelectedAnswers(Array(gridSize * gridSize).fill(''));\n  }, [currentQuestion]);\n\n  const generateWordGrid = () => {\n    const gridSize = Math.max(8, questions[currentQuestion].correctAnswers[0].length);\n    const grid = Array.from({ length: gridSize }, () => Array(gridSize).fill(''));\n  \n    questions[currentQuestion].correctAnswers.forEach((word, index) => {\n      let direction;\n      let wordLength = word.length;\n      let row, col;\n  \n      do {\n        row = Math.floor(Math.random() * gridSize);\n        col = Math.floor(Math.random() * gridSize);\n        direction = Math.random() < 0.5 ? 0 : 1;\n      } while (!canPlaceWord(grid, row, col, direction, wordLength));\n  \n      placeWord(grid, row, col, direction, wordLength);\n    });\n  \n    setWordGrid(grid);\n  };\n\n  const canPlaceWord = (grid, row, col, direction) => {\n    const wordLength = questions[currentQuestion].correctAnswers.length;\n    if (direction === 0) {\n      for (let i = 0; i < wordLength; i++) {\n        if (col + i >= grid.length || col + i < 0 || grid[row][(col + i + grid.length) % grid.length] !== '') {\n          return false;\n        }\n      }\n    } else {\n      for (let i = 0; i < wordLength; i++) {\n        if (row + i >= grid.length || row + i < 0 || grid[(row + i + grid.length) % grid.length][col] !== '') {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n  const placeWord = (grid, row, col, direction, wordLength) => {\n    if (direction === 0) {\n      for (let i = 0; i < wordLength; i++) {\n        grid[row][(col + i + grid.length) % grid.length] = questions[currentQuestion].correctAnswers[i];\n      }\n    } else {\n      for (let i = 0; i < wordLength; i++) {\n        grid[(row + i + grid.length) % grid.length][col] = questions[currentQuestion].correctAnswers[i];\n      }\n    }\n  };\n\n  const handleSubmit = () => {\n    // Validate selected answers...\n  };\n\n  const handleSelect = (row, col) => {\n    // Create a copy of the selectedAnswers array\n    const newSelectedAnswers = [...selectedAnswers];\n  \n    // Check if the cell is empty or already selected\n    if (wordGrid[row][col] && !newSelectedAnswers[row * gridSize + col]) {\n      // Toggle the selection\n      newSelectedAnswers[row * gridSize + col] = wordGrid[row][col];\n    } else if (!wordGrid[row][col] && newSelectedAnswers[row * gridSize + col]) {\n      // Deselect the answer\n      newSelectedAnswers[row * gridSize + col] = '';\n    }\n  \n    // Update the selectedAnswers state\n    setSelectedAnswers(newSelectedAnswers);\n  };\n\n  const renderWordGrid = () => {\n    return wordGrid.map((row, i) => (\n      <div key={i} className=\"grid-row\">\n        {row.map((cell, j) => (\n          <div\n            key={j}\n            className={`grid-cell ${selectedAnswers[i * gridSize + j] ? 'selected' : ''}`}\n            onClick={() => handleSelect(i, j)}\n          >\n            {cell || ' '}\n          </div>\n        ))}\n      </div>\n    ));\n  };\n\n  return (\n    <div className=\"Questions\">\n      <div className=\"word-grid\">{renderWordGrid()}</div>\n      <button onClick={handleSubmit}>Enviar</button>\n    </div>\n  );\n};\n\nexport default Questions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}