{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const questions = [{\n    question: 'São tipos de tecido ósseo?',\n    correctAnswers: ['COMPACTO', 'ESPONJOSO']\n  }, {\n    question: 'Classificação histológica dos ossos',\n    correctAnswers: ['IMATURO', 'LAMELAR']\n  }, {\n    question: 'São duas camadas principais dos ossos',\n    correctAnswers: ['ENDÓSTEO', 'PERIOSTEO']\n  }, {\n    question: 'Celula responsável pela produção de atriz ossea',\n    correctAnswers: ['OSTEOBLASTO']\n  }, {\n    question: 'Principais minerais presentes nos ossos',\n    correctAnswers: ['CÁLCIO', 'FÓSFORO']\n  }\n\n  // Add the rest of the questions...\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array.from({\n    length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0)\n  }, () => ''));\n  const [wordGrid, setWordGrid] = useState([]);\n  const gridSize = wordGrid.length || 8; // Set gridSize to the actual grid length or 8 if it's not defined yet\n  const [currentAnswerIsCorrect, setCurrentAnswerIsCorrect] = useState(false);\n  useEffect(() => {\n    generateWordGrid();\n    setSelectedAnswers(Array.from({\n      length: wordGrid.length * wordGrid.length\n    }, () => ''));\n  }, [currentQuestion]);\n  const generateWordGrid = () => {\n    const longestWordLength = Math.max(...questions[currentQuestion].correctAnswers.map(word => word.length));\n    const gridSize = Math.max(8, longestWordLength);\n    const grid = Array.from({\n      length: gridSize\n    }, () => Array(gridSize).fill(''));\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    questions[currentQuestion].correctAnswers.forEach(word => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Select a random direction: horizontal (0) or vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n      do {\n        row = Math.floor(Math.random() * gridSize);\n        col = Math.floor(Math.random() * gridSize);\n        tries++;\n        if (tries > 100) return; // Avoid infinite loop\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n      placeWord(grid, row, col, word, direction);\n    });\n    fillEmptyCells(grid, availableChars);\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < length; i++) {\n        if (col + i >= grid.length || col + i < 0 || grid[row][(col + i + grid.length) % grid.length] !== '') {\n          return false;\n        }\n      }\n    } else {\n      for (let i = 0; i < length; i++) {\n        if (row + i >= grid.length || row + i < 0 || grid[(row + i + grid.length) % grid.length][col] !== '') {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][(col + i + grid.length) % grid.length] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[(row + i + grid.length) % grid.length][col] = word[i];\n      }\n    }\n  };\n  const fillEmptyCells = (grid, availableChars) => {\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[row].length; col++) {\n        if (grid[row][col] === '') {\n          const randomIndex = Math.floor(Math.random() * availableChars.length);\n          grid[row][col] = availableChars[randomIndex];\n        }\n      }\n    }\n  };\n  const handleAnswerClick = (row, col) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[row * gridSize + col] = wordGrid[row][col];\n    setSelectedAnswers(newSelectedAnswers);\n    console.log('Clicked Answer:', wordGrid[row][col]);\n  };\n  const checkWord = () => {\n    const selectedWord = selectedAnswers.join('');\n    const correctWords = questions[currentQuestion].correctAnswers;\n    const isCorrect = correctWords.some(word => word === selectedWord);\n    console.log('Selected Word:', selectedWord);\n    console.log('Correct Words:', correctWords);\n    console.log('Is Correct:', isCorrect);\n    return isCorrect;\n  };\n  const allCellsFilled = () => {\n    return selectedAnswers.every(answer => answer !== '');\n  };\n  console.log('Selected Answers:', selectedAnswers);\n  useEffect(() => {\n    if (checkWord()) {\n      setCurrentAnswerIsCorrect(true);\n      console.log('currentAnswerIsCorrect:', currentAnswerIsCorrect);\n    } else {\n      setCurrentAnswerIsCorrect(false);\n      console.log('currentAnswerIsCorrect:', currentAnswerIsCorrect);\n    }\n  }, [selectedAnswers]);\n  console.log('currentQuestion:', currentQuestion);\n  console.log('currentAnswerIsCorrect:', currentAnswerIsCorrect);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-background\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"question\",\n        children: questions[currentQuestion].question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-grid\",\n        children: wordGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-grid-row\",\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `word-grid-cell ${cell && selectedAnswers[rowIndex * gridSize + colIndex] ? 'selected' : ''}`,\n            onClick: () => handleAnswerClick(rowIndex, colIndex),\n            children: cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), currentAnswerIsCorrect && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: () => setCurrentQuestion(currentQuestion + 1),\n      children: \"Pr\\xF3xima\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"9VskZub64RBq1jzp0QZYdkuaiXQ=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Questions","_s","questions","question","correctAnswers","currentQuestion","setCurrentQuestion","selectedAnswers","setSelectedAnswers","Array","from","length","reduce","acc","answer","wordGrid","setWordGrid","gridSize","currentAnswerIsCorrect","setCurrentAnswerIsCorrect","generateWordGrid","longestWordLength","Math","max","map","word","grid","fill","availableChars","forEach","wordLength","row","col","tries","direction","random","floor","canPlaceWord","placeWord","fillEmptyCells","console","log","i","randomIndex","handleAnswerClick","newSelectedAnswers","checkWord","selectedWord","join","correctWords","isCorrect","some","allCellsFilled","every","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rowIndex","cell","colIndex","onClick","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  const questions = [\n    {\n      question: 'São tipos de tecido ósseo?',\n      correctAnswers: ['COMPACTO', 'ESPONJOSO']\n    },\n    {\n      question: 'Classificação histológica dos ossos',\n      correctAnswers: ['IMATURO', 'LAMELAR']\n    },\n\n    {\n      question:'São duas camadas principais dos ossos',\n      correctAnswers:['ENDÓSTEO', 'PERIOSTEO']\n    },\n    {\n      question:'Celula responsável pela produção de atriz ossea',\n      correctAnswers:['OSTEOBLASTO']\n    },\n    {\n      question:'Principais minerais presentes nos ossos',\n      correctAnswers:['CÁLCIO','FÓSFORO']\n    },\n   \n\n    // Add the rest of the questions...\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array.from({ length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0) }, () => ''));\n  const [wordGrid, setWordGrid] = useState([]);\n  const gridSize = wordGrid.length || 8; // Set gridSize to the actual grid length or 8 if it's not defined yet\n  const [currentAnswerIsCorrect, setCurrentAnswerIsCorrect] = useState(false); \n\n\n  useEffect(() => {\n    generateWordGrid();\n    setSelectedAnswers(Array.from({ length: wordGrid.length * wordGrid.length }, () => ''));\n  }, [currentQuestion]);\n\n  const generateWordGrid = () => {\n    const longestWordLength = Math.max(...questions[currentQuestion].correctAnswers.map(word => word.length));\n    const gridSize = Math.max(8, longestWordLength);\n    const grid = Array.from({ length: gridSize }, () => Array(gridSize).fill(''));\n\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    questions[currentQuestion].correctAnswers.forEach((word) => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Select a random direction: horizontal (0) or vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n\n      do {\n        row = Math.floor(Math.random() * gridSize);\n        col = Math.floor(Math.random() * gridSize);\n        tries++;\n        if (tries > 100) return; // Avoid infinite loop\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n\n      placeWord(grid, row, col, word, direction);\n    });\n\n    fillEmptyCells(grid, availableChars);\n\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < length; i++) {\n        if (col + i >= grid.length || col + i < 0 || grid[row][(col + i + grid.length) % grid.length] !== '') {\n          return false;\n        }\n      }\n    } else {\n      for (let i = 0; i < length; i++) {\n        if (row + i >= grid.length || row + i < 0 || grid[(row + i + grid.length) % grid.length][col] !== '') {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][(col + i + grid.length) % grid.length] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[(row + i + grid.length) % grid.length][col] = word[i];\n      }\n    }\n  };\n\n  const fillEmptyCells = (grid, availableChars) => {\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[row].length; col++) {\n        if (grid[row][col] === '') {\n          const randomIndex = Math.floor(Math.random() * availableChars.length);\n          grid[row][col] = availableChars[randomIndex];\n        }\n      }\n    }\n  };\n\n  const handleAnswerClick = (row, col) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[row * gridSize + col] = wordGrid[row][col];\n    setSelectedAnswers(newSelectedAnswers);\n    console.log('Clicked Answer:', wordGrid[row][col]);\n  };\n\n  const checkWord = () => {\n    const selectedWord = selectedAnswers.join('');\n    const correctWords = questions[currentQuestion].correctAnswers;\n    const isCorrect = correctWords.some(word => word === selectedWord);\n    console.log('Selected Word:', selectedWord);\n    console.log('Correct Words:', correctWords);\n    console.log('Is Correct:', isCorrect);\n    return isCorrect;\n  };\n\n  const allCellsFilled = () => {\n    return selectedAnswers.every(answer => answer !== '');\n  };\n\n  console.log('Selected Answers:', selectedAnswers);\n  useEffect(() => {\n    if (checkWord()) {\n      setCurrentAnswerIsCorrect(true);\n      console.log('currentAnswerIsCorrect:', currentAnswerIsCorrect);\n    } else {\n      setCurrentAnswerIsCorrect(false);\n      console.log('currentAnswerIsCorrect:', currentAnswerIsCorrect);\n    }\n  }, [selectedAnswers]);\n\n  console.log('currentQuestion:', currentQuestion);\n  console.log('currentAnswerIsCorrect:', currentAnswerIsCorrect);\n  return (\n    <div className=\"questions-container\">\n      <div className=\"question-background\">\n        <h2 className=\"question\">{questions[currentQuestion].question}</h2>\n      </div>\n      <div className=\"grid-container\">\n        <div className=\"word-grid\">\n          {wordGrid.map((row, rowIndex) => (\n            <div key={rowIndex} className=\"word-grid-row\">\n              {row.map((cell, colIndex) => (\n                <div\n                  key={colIndex}\n                  className={`word-grid-cell ${cell && selectedAnswers[rowIndex * gridSize + colIndex] ? 'selected' : ''}`}\n                  onClick={() => handleAnswerClick(rowIndex, colIndex)}\n                >\n                  {cell}\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>{currentAnswerIsCorrect && (\n        <button className=\"next-button\" onClick={() => setCurrentQuestion(currentQuestion + 1)}>\n          Próxima\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Questions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}