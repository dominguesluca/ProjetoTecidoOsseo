{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const questions = [{\n    question: 'São tipos de tecido ósseo?',\n    correctAnswers: ['COMPACTO', 'ESPONJOSO']\n  }, {\n    question: 'Classificação histológica dos ossos',\n    correctAnswers: ['IMATURO', 'LAMELAR']\n  }\n  // Add the rest of the questions...\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [wordGrid, setWordGrid] = useState([]);\n  const gridSize = wordGrid.length || 8; // Set gridSize to the actual grid length or 8 if it's not defined yet\n\n  useEffect(() => {\n    generateWordGrid();\n    setSelectedAnswers(Array(gridSize * gridSize).fill(''));\n  }, [currentQuestion]);\n  const generateWordGrid = () => {\n    const longestWordLength = Math.max(...questions[currentQuestion].correctAnswers.map(word => word.length));\n    const gridSize = Math.max(8, longestWordLength);\n    const grid = Array.from({\n      length: gridSize\n    }, () => Array(gridSize).fill(''));\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    questions[currentQuestion].correctAnswers.forEach(word => {\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Select a random direction: horizontal (0) or vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n      do {\n        row = Math.floor(Math.random() * gridSize);\n        col = Math.floor(Math.random() * gridSize);\n        tries++;\n        if (tries > 100) return; // Avoid infinite loop\n      } while (!canPlaceWord(grid, row, col, word.length, direction));\n      placeWord(grid, row, col, word.length, direction);\n    });\n    setWordGrid(grid);\n  };\n  const canPlaceWord = (grid, row, col, wordLength, direction) => {\n    for (let i = 0; i < wordLength; i++) {\n      const r = direction === 0 ? row : row + i;\n      const c = direction === 0 ? col + i : col;\n      if (grid[r][c] !== '') return false;\n    }\n    return true;\n  };\n  const placeWord = (grid, row, col, wordLength, direction) => {\n    for (let i = 0; i < wordLength; i++) {\n      const r = direction === 0 ? row : row + i;\n      const c = direction === 0 ? col + i : col;\n      grid[r][c] = questions[currentQuestion].correctAnswers[i];\n    }\n  };\n  const handleSubmit = () => {\n    // Validate selected answers...\n  };\n  const handleSelect = (row, col) => {\n    // Create a copy of the selectedAnswers array\n    const newSelectedAnswers = [...selectedAnswers];\n\n    // Check if the cell is empty or already selected\n    if (wordGrid[row][col] && !newSelectedAnswers[row * gridSize + col]) {\n      // Toggle the selection\n      newSelectedAnswers[row * gridSize + col] = wordGrid[row][col];\n    } else if (!wordGrid[row][col] && newSelectedAnswers[row * gridSize + col]) {\n      // Deselect the answer\n      newSelectedAnswers[row * gridSize + col] = '';\n    }\n\n    // Update the selectedAnswers state\n    setSelectedAnswers(newSelectedAnswers);\n  };\n  const renderWordGrid = () => {\n    return wordGrid.map((row, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row.map((cell, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `grid-cell ${selectedAnswers[i * gridSize + j] ? 'selected' : ''}`,\n        onClick: () => handleSelect(i, j),\n        children: cell || ' '\n      }, j, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this))\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Questions\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-grid\",\n      children: renderWordGrid()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Enviar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"LkrvxyJwfLfuzBCQrOZW0sUSyF8=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Questions","_s","questions","question","correctAnswers","currentQuestion","setCurrentQuestion","selectedAnswers","setSelectedAnswers","wordGrid","setWordGrid","gridSize","length","generateWordGrid","Array","fill","longestWordLength","Math","max","map","word","grid","from","availableChars","forEach","row","col","tries","direction","random","floor","canPlaceWord","placeWord","wordLength","i","r","c","handleSubmit","handleSelect","newSelectedAnswers","renderWordGrid","className","children","cell","j","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  const questions = [\n    {\n      question: 'São tipos de tecido ósseo?',\n      correctAnswers: ['COMPACTO', 'ESPONJOSO']\n    },\n    {\n      question: 'Classificação histológica dos ossos',\n      correctAnswers: ['IMATURO', 'LAMELAR']\n    }\n    // Add the rest of the questions...\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [wordGrid, setWordGrid] = useState([]);\n  const gridSize = wordGrid.length || 8; // Set gridSize to the actual grid length or 8 if it's not defined yet\n\n  useEffect(() => {\n    generateWordGrid();\n    setSelectedAnswers(Array(gridSize * gridSize).fill(''));\n  }, [currentQuestion]);\n\n  const generateWordGrid = () => {\n    const longestWordLength = Math.max(...questions[currentQuestion].correctAnswers.map(word => word.length));\n    const gridSize = Math.max(8, longestWordLength);\n    const grid = Array.from({ length: gridSize }, () => Array(gridSize).fill(''));\n\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    questions[currentQuestion].correctAnswers.forEach((word) => {\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Select a random direction: horizontal (0) or vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n\n      do {\n        row = Math.floor(Math.random() * gridSize);\n        col = Math.floor(Math.random() * gridSize);\n        tries++;\n        if (tries > 100) return; // Avoid infinite loop\n      } while (!canPlaceWord(grid, row, col, word.length, direction));\n\n      placeWord(grid, row, col, word.length, direction);\n    });\n\n    setWordGrid(grid);\n  };\n\n  const canPlaceWord = (grid, row, col, wordLength, direction) => {\n    for (let i = 0; i < wordLength; i++) {\n      const r = direction === 0 ? row : row + i;\n      const c = direction === 0 ? col + i : col;\n      if (grid[r][c] !== '') return false;\n    }\n    return true;\n  };\n\n  const placeWord = (grid, row, col, wordLength, direction) => {\n    for (let i = 0; i < wordLength; i++) {\n      const r = direction === 0 ? row : row + i;\n      const c = direction === 0 ? col + i : col;\n      grid[r][c] = questions[currentQuestion].correctAnswers[i];\n    }\n  };\n\n  const handleSubmit = () => {\n    // Validate selected answers...\n  };\n\n  const handleSelect = (row, col) => {\n    // Create a copy of the selectedAnswers array\n    const newSelectedAnswers = [...selectedAnswers];\n  \n    // Check if the cell is empty or already selected\n    if (wordGrid[row][col] && !newSelectedAnswers[row * gridSize + col]) {\n      // Toggle the selection\n      newSelectedAnswers[row * gridSize + col] = wordGrid[row][col];\n    } else if (!wordGrid[row][col] && newSelectedAnswers[row * gridSize + col]) {\n      // Deselect the answer\n      newSelectedAnswers[row * gridSize + col] = '';\n    }\n  \n    // Update the selectedAnswers state\n    setSelectedAnswers(newSelectedAnswers);\n  };\n\n  const renderWordGrid = () => {\n    return wordGrid.map((row, i) => (\n      <div key={i} className=\"grid-row\">\n        {row.map((cell, j) => (\n          <div\n            key={j}\n            className={`grid-cell ${selectedAnswers[i * gridSize + j] ? 'selected' : ''}`}\n            onClick={() => handleSelect(i, j)}\n          >\n            {cell || ' '}\n          </div>\n        ))}\n      </div>\n    ));\n  };\n\n  return (\n    <div className=\"Questions\">\n      <div className=\"word-grid\">{renderWordGrid()}</div>\n      <button onClick={handleSubmit}>Enviar</button>\n    </div>\n  );\n};\n\nexport default Questions;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,SAAS,GAAG,CAChB;IACEC,QAAQ,EAAE,4BAA4B;IACtCC,cAAc,EAAE,CAAC,UAAU,EAAE,WAAW;EAC1C,CAAC,EACD;IACED,QAAQ,EAAE,qCAAqC;IAC/CC,cAAc,EAAE,CAAC,SAAS,EAAE,SAAS;EACvC;EACA;EAAA,CACD;EAED,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACzD,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMe,QAAQ,GAAGF,QAAQ,CAACG,MAAM,IAAI,CAAC,CAAC,CAAC;;EAEvCf,SAAS,CAAC,MAAM;IACdgB,gBAAgB,CAAC,CAAC;IAClBL,kBAAkB,CAACM,KAAK,CAACH,QAAQ,GAAGA,QAAQ,CAAC,CAACI,IAAI,CAAC,EAAE,CAAC,CAAC;EACzD,CAAC,EAAE,CAACV,eAAe,CAAC,CAAC;EAErB,MAAMQ,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,MAAMG,iBAAiB,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGhB,SAAS,CAACG,eAAe,CAAC,CAACD,cAAc,CAACe,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACR,MAAM,CAAC,CAAC;IACzG,MAAMD,QAAQ,GAAGM,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEF,iBAAiB,CAAC;IAC/C,MAAMK,IAAI,GAAGP,KAAK,CAACQ,IAAI,CAAC;MAAEV,MAAM,EAAED;IAAS,CAAC,EAAE,MAAMG,KAAK,CAACH,QAAQ,CAAC,CAACI,IAAI,CAAC,EAAE,CAAC,CAAC;IAE7E,MAAMQ,cAAc,GAAG,4BAA4B;IAEnDrB,SAAS,CAACG,eAAe,CAAC,CAACD,cAAc,CAACoB,OAAO,CAAEJ,IAAI,IAAK;MAC1D,IAAIK,GAAG,EAAEC,GAAG;MACZ,IAAIC,KAAK,GAAG,CAAC;MACb,IAAIC,SAAS;;MAEb;MACAA,SAAS,GAAGX,IAAI,CAACY,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;MAEvC,GAAG;QACDJ,GAAG,GAAGR,IAAI,CAACa,KAAK,CAACb,IAAI,CAACY,MAAM,CAAC,CAAC,GAAGlB,QAAQ,CAAC;QAC1Ce,GAAG,GAAGT,IAAI,CAACa,KAAK,CAACb,IAAI,CAACY,MAAM,CAAC,CAAC,GAAGlB,QAAQ,CAAC;QAC1CgB,KAAK,EAAE;QACP,IAAIA,KAAK,GAAG,GAAG,EAAE,OAAO,CAAC;MAC3B,CAAC,QAAQ,CAACI,YAAY,CAACV,IAAI,EAAEI,GAAG,EAAEC,GAAG,EAAEN,IAAI,CAACR,MAAM,EAAEgB,SAAS,CAAC;MAE9DI,SAAS,CAACX,IAAI,EAAEI,GAAG,EAAEC,GAAG,EAAEN,IAAI,CAACR,MAAM,EAAEgB,SAAS,CAAC;IACnD,CAAC,CAAC;IAEFlB,WAAW,CAACW,IAAI,CAAC;EACnB,CAAC;EAED,MAAMU,YAAY,GAAGA,CAACV,IAAI,EAAEI,GAAG,EAAEC,GAAG,EAAEO,UAAU,EAAEL,SAAS,KAAK;IAC9D,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,UAAU,EAAEC,CAAC,EAAE,EAAE;MACnC,MAAMC,CAAC,GAAGP,SAAS,KAAK,CAAC,GAAGH,GAAG,GAAGA,GAAG,GAAGS,CAAC;MACzC,MAAME,CAAC,GAAGR,SAAS,KAAK,CAAC,GAAGF,GAAG,GAAGQ,CAAC,GAAGR,GAAG;MACzC,IAAIL,IAAI,CAACc,CAAC,CAAC,CAACC,CAAC,CAAC,KAAK,EAAE,EAAE,OAAO,KAAK;IACrC;IACA,OAAO,IAAI;EACb,CAAC;EAED,MAAMJ,SAAS,GAAGA,CAACX,IAAI,EAAEI,GAAG,EAAEC,GAAG,EAAEO,UAAU,EAAEL,SAAS,KAAK;IAC3D,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,UAAU,EAAEC,CAAC,EAAE,EAAE;MACnC,MAAMC,CAAC,GAAGP,SAAS,KAAK,CAAC,GAAGH,GAAG,GAAGA,GAAG,GAAGS,CAAC;MACzC,MAAME,CAAC,GAAGR,SAAS,KAAK,CAAC,GAAGF,GAAG,GAAGQ,CAAC,GAAGR,GAAG;MACzCL,IAAI,CAACc,CAAC,CAAC,CAACC,CAAC,CAAC,GAAGlC,SAAS,CAACG,eAAe,CAAC,CAACD,cAAc,CAAC8B,CAAC,CAAC;IAC3D;EACF,CAAC;EAED,MAAMG,YAAY,GAAGA,CAAA,KAAM;IACzB;EAAA,CACD;EAED,MAAMC,YAAY,GAAGA,CAACb,GAAG,EAAEC,GAAG,KAAK;IACjC;IACA,MAAMa,kBAAkB,GAAG,CAAC,GAAGhC,eAAe,CAAC;;IAE/C;IACA,IAAIE,QAAQ,CAACgB,GAAG,CAAC,CAACC,GAAG,CAAC,IAAI,CAACa,kBAAkB,CAACd,GAAG,GAAGd,QAAQ,GAAGe,GAAG,CAAC,EAAE;MACnE;MACAa,kBAAkB,CAACd,GAAG,GAAGd,QAAQ,GAAGe,GAAG,CAAC,GAAGjB,QAAQ,CAACgB,GAAG,CAAC,CAACC,GAAG,CAAC;IAC/D,CAAC,MAAM,IAAI,CAACjB,QAAQ,CAACgB,GAAG,CAAC,CAACC,GAAG,CAAC,IAAIa,kBAAkB,CAACd,GAAG,GAAGd,QAAQ,GAAGe,GAAG,CAAC,EAAE;MAC1E;MACAa,kBAAkB,CAACd,GAAG,GAAGd,QAAQ,GAAGe,GAAG,CAAC,GAAG,EAAE;IAC/C;;IAEA;IACAlB,kBAAkB,CAAC+B,kBAAkB,CAAC;EACxC,CAAC;EAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,OAAO/B,QAAQ,CAACU,GAAG,CAAC,CAACM,GAAG,EAAES,CAAC,kBACzBnC,OAAA;MAAa0C,SAAS,EAAC,UAAU;MAAAC,QAAA,EAC9BjB,GAAG,CAACN,GAAG,CAAC,CAACwB,IAAI,EAAEC,CAAC,kBACf7C,OAAA;QAEE0C,SAAS,EAAG,aAAYlC,eAAe,CAAC2B,CAAC,GAAGvB,QAAQ,GAAGiC,CAAC,CAAC,GAAG,UAAU,GAAG,EAAG,EAAE;QAC9EC,OAAO,EAAEA,CAAA,KAAMP,YAAY,CAACJ,CAAC,EAAEU,CAAC,CAAE;QAAAF,QAAA,EAEjCC,IAAI,IAAI;MAAG,GAJPC,CAAC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKH,CACN;IAAC,GATMf,CAAC;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAUN,CACN,CAAC;EACJ,CAAC;EAED,oBACElD,OAAA;IAAK0C,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxB3C,OAAA;MAAK0C,SAAS,EAAC,WAAW;MAAAC,QAAA,EAAEF,cAAc,CAAC;IAAC;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACnDlD,OAAA;MAAQ8C,OAAO,EAAER,YAAa;MAAAK,QAAA,EAAC;IAAM;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEV,CAAC;AAAChD,EAAA,CA/GID,SAAS;AAAAkD,EAAA,GAATlD,SAAS;AAiHf,eAAeA,SAAS;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}