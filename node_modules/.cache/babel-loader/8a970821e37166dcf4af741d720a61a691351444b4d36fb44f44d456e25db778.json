{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const questions = [{\n    question: 'São tipos de tecido ósseo',\n    correctAnswers: ['COMPACTO', 'ESPONJOSO']\n  }, {\n    question: 'Classificação histológica dos ossos',\n    correctAnswers: ['IMATURO', 'LAMELAR']\n  }, {\n    question: 'São duas camadas principais dos ossos',\n    correctAnswers: ['ENDÓSTEO', 'PERIOSTEO']\n  }, {\n    question: 'Celula responsável pela produção de atriz ossea',\n    correctAnswers: ['OSTEOBLASTO']\n  }, {\n    question: 'Principais minerais presentes nos ossos',\n    correctAnswers: ['CÁLCIO', 'FÓSFORO']\n  }\n\n  // Add the rest of the questions...\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array.from({\n    length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0)\n  }, () => ''));\n  const [wordGrid, setWordGrid] = useState([]);\n  const [currentAnswerIsCorrect, setCurrentAnswerIsCorrect] = useState(false);\n  const [showFinalScreen, setShowFinalScreen] = useState(false);\n  useEffect(() => {\n    generateWordGrid();\n    setSelectedAnswers(Array.from({\n      length: wordGrid.length * wordGrid.length\n    }, () => ''));\n  }, [currentQuestion]);\n  const generateWordGrid = () => {\n    const longestWordLength = Math.max(...questions[currentQuestion].correctAnswers.map(word => word.length));\n    const gridSize = Math.max(8, longestWordLength);\n    const grid = Array.from({\n      length: gridSize\n    }, () => Array(gridSize).fill(''));\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    questions[currentQuestion].correctAnswers.forEach(word => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Select a random direction: horizontal (0) or vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n      do {\n        row = Math.floor(Math.random() * gridSize);\n        col = Math.floor(Math.random() * gridSize);\n        tries++;\n        if (tries > 100) return; // Avoid infinite loop\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n      placeWord(grid, row, col, word, direction);\n    });\n    fillEmptyCells(grid, availableChars);\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < length; i++) {\n        if (col + i >= grid.length || col + i < 0 || grid[row][(col + i + grid.length) % grid.length] !== '') {\n          return false;\n        }\n      }\n    } else {\n      for (let i = 0; i < length; i++) {\n        if (row + i >= grid.length || row + i < 0 || grid[(row + i + grid.length) % grid.length][col] !== '') {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][(col + i + grid.length) % grid.length] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[(row + i + grid.length) % grid.length][col] = word[i];\n      }\n    }\n  };\n  const fillEmptyCells = (grid, availableChars) => {\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[row].length; col++) {\n        if (grid[row][col] === '') {\n          const randomIndex = Math.floor(Math.random() * availableChars.length);\n          grid[row][col] = availableChars[randomIndex];\n        }\n      }\n    }\n  };\n  const handleAnswerClick = (row, col) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[row * gridSize + col] = wordGrid[row][col];\n    setSelectedAnswers(newSelectedAnswers);\n    console.log('Clicked Answer:', wordGrid[row][col]);\n    if (checkWord()) {\n      setCurrentAnswerIsCorrect(true);\n      setShowFinalScreen(true);\n    }\n  };\n  const handleNextClick = () => {\n    setCurrentQuestion(currentQuestion + 1);\n    setShowFinalScreen(false);\n  };\n  const checkWord = () => {\n    const correctAnswers = questions[currentQuestion].correctAnswers;\n    const selectedAnswersArray = selectedAnswers.join('').split('');\n    const selectedAnswersSet = new Set(selectedAnswersArray);\n    const allCorrectAnswersSelected = correctAnswers.every(answer => {\n      const answerSet = new Set(answer.split(''));\n      const answerArray = Array.from(answer);\n      const selectedAnswerArray = Array.from(selectedAnswersSet).filter(letter => answerArray.includes(letter));\n      return answerSet.size === selectedAnswerArray.length && answerArray.every(letter => selectedAnswerArray.includes(letter));\n    });\n    console.log('All correct answers selected:', allCorrectAnswersSelected);\n    return allCorrectAnswersSelected;\n  };\n  const allCellsFilled = () => {\n    return selectedAnswers.every(answer => answer !== '');\n  };\n  console.log('Selected Answers:', selectedAnswers);\n  useEffect(() => {\n    if (checkWord()) {\n      setCurrentAnswerIsCorrect(true);\n      console.log('currentAnswerIsCorrect:', currentAnswerIsCorrect);\n    } else {\n      setCurrentAnswerIsCorrect(false);\n      console.log('currentAnswerIsCorrect:', currentAnswerIsCorrect);\n    }\n  }, [selectedAnswers]);\n  console.log('currentQuestion:', currentQuestion);\n  console.log('currentAnswerIsCorrect:', currentAnswerIsCorrect);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [showFinalScreen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"final-screen\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"final-screen-title\",\n        children: \"Resultado Final\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"final-screen-text\",\n        children: \"Voc\\xEA conquistou o jogo!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"final-screen-button\",\n        onClick: () => setShowFinalScreen(false),\n        children: \"Voltar para o jogo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this), !showFinalScreen && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-background\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"question\",\n          children: questions[currentQuestion].question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-grid\",\n          children: wordGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"word-grid-row\",\n            children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `word-grid-cell ${cell && selectedAnswers[rowIndex * gridSize + colIndex] ? 'selected' : ''}`,\n              onClick: () => handleAnswerClick(rowIndex, colIndex),\n              children: cell\n            }, colIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 21\n            }, this))\n          }, rowIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), currentAnswerIsCorrect && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: () => handleNextClick(),\n      children: \"Pr\\xF3xima\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Questions, \"Kl5n0iEMY/giUpR5vohKEq2RISw=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Questions","_s","questions","question","correctAnswers","currentQuestion","setCurrentQuestion","selectedAnswers","setSelectedAnswers","Array","from","length","reduce","acc","answer","wordGrid","setWordGrid","currentAnswerIsCorrect","setCurrentAnswerIsCorrect","showFinalScreen","setShowFinalScreen","generateWordGrid","longestWordLength","Math","max","map","word","gridSize","grid","fill","availableChars","forEach","wordLength","row","col","tries","direction","random","floor","canPlaceWord","placeWord","fillEmptyCells","console","log","i","randomIndex","handleAnswerClick","newSelectedAnswers","checkWord","handleNextClick","selectedAnswersArray","join","split","selectedAnswersSet","Set","allCorrectAnswersSelected","every","answerSet","answerArray","selectedAnswerArray","filter","letter","includes","size","allCellsFilled","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","rowIndex","cell","colIndex","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  const questions = [\n    {\n      question: 'São tipos de tecido ósseo',\n      correctAnswers: ['COMPACTO', 'ESPONJOSO']\n    },\n    {\n      question: 'Classificação histológica dos ossos',\n      correctAnswers: ['IMATURO', 'LAMELAR']\n    },\n\n    {\n      question:'São duas camadas principais dos ossos',\n      correctAnswers:['ENDÓSTEO', 'PERIOSTEO']\n    },\n    {\n      question:'Celula responsável pela produção de atriz ossea',\n      correctAnswers:['OSTEOBLASTO']\n    },\n    {\n      question:'Principais minerais presentes nos ossos',\n      correctAnswers:['CÁLCIO','FÓSFORO']\n    },\n   \n\n    // Add the rest of the questions...\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array.from({ length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0) }, () => ''));\n  const [wordGrid, setWordGrid] = useState([]);\n  const [currentAnswerIsCorrect, setCurrentAnswerIsCorrect] = useState(false);\n  const [showFinalScreen, setShowFinalScreen] = useState(false);\n\n\n  useEffect(() => {\n    generateWordGrid();\n    setSelectedAnswers(Array.from({ length: wordGrid.length * wordGrid.length }, () => ''));\n  }, [currentQuestion]);\n\n  const generateWordGrid = () => {\n    const longestWordLength = Math.max(...questions[currentQuestion].correctAnswers.map(word => word.length));\n    const gridSize = Math.max(8, longestWordLength);\n    const grid = Array.from({ length: gridSize }, () => Array(gridSize).fill(''));\n\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    questions[currentQuestion].correctAnswers.forEach((word) => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Select a random direction: horizontal (0) or vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n\n      do {\n        row = Math.floor(Math.random() * gridSize);\n        col = Math.floor(Math.random() * gridSize);\n        tries++;\n        if (tries > 100) return; // Avoid infinite loop\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n\n      placeWord(grid, row, col, word, direction);\n    });\n\n    fillEmptyCells(grid, availableChars);\n\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < length; i++) {\n        if (col + i >= grid.length || col + i < 0 || grid[row][(col + i + grid.length) % grid.length] !== '') {\n          return false;\n        }\n      }\n    } else {\n      for (let i = 0; i < length; i++) {\n        if (row + i >= grid.length || row + i < 0 || grid[(row + i + grid.length) % grid.length][col] !== '') {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][(col + i + grid.length) % grid.length] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[(row + i + grid.length) % grid.length][col] = word[i];\n      }\n    }\n  };\n\n  const fillEmptyCells = (grid, availableChars) => {\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[row].length; col++) {\n        if (grid[row][col] === '') {\n          const randomIndex = Math.floor(Math.random() * availableChars.length);\n          grid[row][col] = availableChars[randomIndex];\n        }\n      }\n    }\n  };\n\n  const handleAnswerClick = (row, col) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[row * gridSize + col] = wordGrid[row][col];\n    setSelectedAnswers(newSelectedAnswers);\n    console.log('Clicked Answer:', wordGrid[row][col]);\n    if (checkWord()) {\n      setCurrentAnswerIsCorrect(true);\n      setShowFinalScreen(true);\n    }\n  };\n  const handleNextClick = () => {\n    setCurrentQuestion(currentQuestion + 1);\n    setShowFinalScreen(false);\n  };\n\n  const checkWord = () => {\n    const correctAnswers = questions[currentQuestion].correctAnswers;\n    const selectedAnswersArray = selectedAnswers.join('').split('');\n    const selectedAnswersSet = new Set(selectedAnswersArray);\n    const allCorrectAnswersSelected = correctAnswers.every(answer => {\n      const answerSet = new Set(answer.split(''));\n      const answerArray = Array.from(answer);\n      const selectedAnswerArray = Array.from(selectedAnswersSet).filter(letter => answerArray.includes(letter));\n      return answerSet.size === selectedAnswerArray.length && answerArray.every(letter => selectedAnswerArray.includes(letter));\n    });\n    console.log('All correct answers selected:', allCorrectAnswersSelected);\n    return allCorrectAnswersSelected;\n  };\n\n  const allCellsFilled = () => {\n    return selectedAnswers.every(answer => answer !== '');\n  };\n\n  console.log('Selected Answers:', selectedAnswers);\n  useEffect(() => {\n  if (checkWord()) {\n    setCurrentAnswerIsCorrect(true);\n    console.log('currentAnswerIsCorrect:', currentAnswerIsCorrect);\n  } else {\n    setCurrentAnswerIsCorrect(false);\n    console.log('currentAnswerIsCorrect:', currentAnswerIsCorrect);\n  }\n}, [selectedAnswers]);\n\n  console.log('currentQuestion:', currentQuestion);\n  console.log('currentAnswerIsCorrect:', currentAnswerIsCorrect);\n  \n  \n  return (\n    <>\n      {showFinalScreen && (\n        <div className=\"final-screen\">\n          <h2 className=\"final-screen-title\">Resultado Final</h2>\n          <p className=\"final-screen-text\">Você conquistou o jogo!</p>\n          <button className=\"final-screen-button\" onClick={() => setShowFinalScreen(false)}>\n            Voltar para o jogo\n          </button>\n        </div>\n      )}\n  \n      {!showFinalScreen && (\n        <>\n          <div className=\"question-background\">\n            <h2 className=\"question\">{questions[currentQuestion].question}</h2>\n          </div>\n          <div className=\"grid-container\">\n            <div className=\"word-grid\">\n              {wordGrid.map((row, rowIndex) => (\n                <div key={rowIndex} className=\"word-grid-row\">\n                  {row.map((cell, colIndex) => (\n                    <div\n                      key={colIndex}\n                      className={`word-grid-cell ${cell && selectedAnswers[rowIndex * gridSize + colIndex]? 'selected' : ''}`}\n                      onClick={() => handleAnswerClick(rowIndex, colIndex)}\n                    >\n                      {cell}\n                    </div>\n                  ))}\n                </div>\n              ))}\n            </div>\n          </div>\n        </>\n      )}\n  \n      {currentAnswerIsCorrect && (\n        <button className=\"next-button\" onClick={() => handleNextClick()}>\n          Próxima\n        </button>\n      )}\n    </>\n  );\n};\n\nexport default Questions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}