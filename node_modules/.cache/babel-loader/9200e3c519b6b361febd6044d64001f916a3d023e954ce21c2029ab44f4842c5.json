{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const questions = [{\n    question: 'São tipos de tecido ósseo?',\n    answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['COMPACTO', 'ESPONJOSO']\n  }, {\n    question: 'Classificação histológica dos ossos',\n    answers: ['Sporóstilo', 'Xilo', 'Sleróstilo', 'Canelha', 'Laminado'],\n    correctAnswers: ['ESPONJOSO', 'SPORÓSTILO', 'LAMINADO']\n  }];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [wordGrid, setWordGrid] = useState([]);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n  const fillEmptyCells = (grid, availableChars) => {\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[row].length; col++) {\n        if (grid[row][col] === '') {\n          grid[row][col] = availableChars[Math.floor(Math.random() * availableChars.length)];\n        }\n      }\n    }\n  };\n  const canPlaceWord = (grid, row, col, wordLength, direction) => {\n    for (let i = 0; i < wordLength; i++) {\n      if (direction === 0) {\n        if (grid[row][col + i] !== '' && grid[row][col + i] !== word[i]) return false;\n      } else {\n        if (grid[row + i][col] !== '' && grid[row + i][col] !== word[i]) return false;\n      }\n    }\n    return true;\n  };\n  const placeWord = (grid, row, col, word, direction) => {\n    for (let i = 0; i < word.length; i++) {\n      if (direction === 0) {\n        grid[row][col + i] = word[i];\n      } else {\n        grid[row + i][col] = word[i];\n      }\n    }\n  };\n  const allCellsFilled = () => {\n    return !wordGrid.some(row => row.some(cell => cell === ''));\n  };\n  const checkWord = () => {\n    return questions[currentQuestion].correctAnswers.every((word, index) => word === selectedAnswers[index].toUpperCase());\n  };\n  const generateWordGrid = () => {\n    const longestWordLength = Math.max(...questions[currentQuestion].correctAnswers.map(word => word.length));\n    const gridSize = Math.max(8, longestWordLength);\n    const grid = Array.from({\n      length: gridSize\n    }, () => Array(gridSize).fill(''));\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    fillEmptyCells(grid, availableChars);\n    questions[currentQuestion].correctAnswers.forEach(word => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n      direction = Math.random() < 0.5 ? 0 : 1;\n      do {\n        row = Math.floor(Math.random() * gridSize);\n        col = Math.floor(Math.random() * gridSize);\n        tries++;\n        if (tries > 100) return;\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n      placeWord(grid, row, col, word, direction);\n    });\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n  const handleAnswerClick = (rowIndex, colIndex) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[rowIndex * gridSize + colIndex] = wordGrid[rowIndex][colIndex];\n    setSelectedAnswers(newSelectedAnswers);\n    console.log('Clicked Answer:', wordGrid[rowIndex][colIndex]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question\",\n      children: questions[currentQuestion].question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answers\",\n      children: questions[currentQuestion].answers.map((word, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `answer ${selectedAnswers[index] ? selectedAnswers[index] === word.toUpperCase() ? 'correct' : 'incorrect' : ''}`,\n        onClick: () => handleAnswerClick(index, 0),\n        children: word\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: wordGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `cell ${selectedAnswers[rowIndex * gridSize + colIndex] ? selectedAnswers[rowIndex * gridSize + colIndex] === wordGrid[rowIndex][colIndex] ? 'correct' : 'incorrect' : ''}`,\n          onClick: () => handleAnswerClick(rowIndex, colIndex),\n          children: cell\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        if (checkWord()) {\n          alert('Correct!');\n        } else {\n          alert('Incorrect. Please try again.');\n        }\n      },\n      children: \"Check Word\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"bhqg37EcA8wLXFS8eoMOKpMPa1g=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Questions","_s","questions","question","answers","correctAnswers","currentQuestion","setCurrentQuestion","wordGrid","setWordGrid","selectedAnswers","setSelectedAnswers","generateWordGrid","fillEmptyCells","grid","availableChars","row","length","col","Math","floor","random","canPlaceWord","wordLength","direction","i","word","placeWord","allCellsFilled","some","cell","checkWord","every","index","toUpperCase","longestWordLength","max","map","gridSize","Array","from","fill","forEach","tries","console","log","handleAnswerClick","rowIndex","colIndex","newSelectedAnswers","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","alert","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  const questions = [\n    {\n      question: 'São tipos de tecido ósseo?',\n      answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['COMPACTO', 'ESPONJOSO']\n    },\n    {\n      question: 'Classificação histológica dos ossos',\n      answers: ['Sporóstilo', 'Xilo', 'Sleróstilo', 'Canelha', 'Laminado'],\n      correctAnswers: ['ESPONJOSO', 'SPORÓSTILO', 'LAMINADO']\n    }\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [wordGrid, setWordGrid] = useState([]);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n\n  const fillEmptyCells = (grid, availableChars) => {\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[row].length; col++) {\n        if (grid[row][col] === '') {\n          grid[row][col] = availableChars[Math.floor(Math.random() * availableChars.length)];\n        }\n      }\n    }\n  };\n\n  const canPlaceWord = (grid, row, col, wordLength, direction) => {\n    for (let i = 0; i < wordLength; i++) {\n      if (direction === 0) {\n        if (grid[row][col + i] !== '' && grid[row][col + i] !== word[i]) return false;\n      } else {\n        if (grid[row + i][col] !== '' && grid[row + i][col] !== word[i]) return false;\n      }\n    }\n    return true;\n  };\n\n  const placeWord = (grid, row, col, word, direction) => {\n    for (let i = 0; i < word.length; i++) {\n      if (direction === 0) {\n        grid[row][col + i] = word[i];\n      } else {\n        grid[row + i][col] = word[i];\n      }\n    }\n  };\n\n  const allCellsFilled = () => {\n    return !wordGrid.some(row => row.some(cell => cell === ''));\n  };\n\n  const checkWord = () => {\n    return questions[currentQuestion].correctAnswers.every((word, index) => word === selectedAnswers[index].toUpperCase());\n  };\n\n  const generateWordGrid = () => {\n    const longestWordLength = Math.max(...questions[currentQuestion].correctAnswers.map(word => word.length));\n    const gridSize = Math.max(8, longestWordLength);\n    const grid = Array.from({ length: gridSize }, () => Array(gridSize).fill(''));\n\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    fillEmptyCells(grid, availableChars);\n\n    questions[currentQuestion].correctAnswers.forEach((word) => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      direction = Math.random() < 0.5 ? 0 : 1;\n\n      do {\n        row = Math.floor(Math.random() * gridSize);\n        col = Math.floor(Math.random() * gridSize);\n        tries++;\n        if (tries > 100) return;\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n\n      placeWord(grid, row, col, word, direction);\n    });\n\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n\n  const handleAnswerClick = (rowIndex, colIndex) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[rowIndex * gridSize + colIndex] = wordGrid[rowIndex][colIndex];\n    setSelectedAnswers(newSelectedAnswers);\n    console.log('Clicked Answer:', wordGrid[rowIndex][colIndex]);\n  };\n\n  return (\n    <div className=\"questions\">\n      <div className=\"question\">\n        {questions[currentQuestion].question}\n      </div>\n      <div className=\"answers\">\n        {questions[currentQuestion].answers.map((word, index) => (\n          <div\n            key={index}\n            className={`answer ${selectedAnswers[index] ? selectedAnswers[index] === word.toUpperCase() ? 'correct' : 'incorrect' : ''}`}\n            onClick={() => handleAnswerClick(index, 0)}\n          >\n            {word}\n          </div>\n        ))}\n      </div>\n      <div className=\"grid\">\n        {wordGrid.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((cell, colIndex) => (\n              <div\n                key={colIndex}\n                className={`cell ${selectedAnswers[rowIndex * gridSize + colIndex] ? selectedAnswers[rowIndex * gridSize + colIndex] === wordGrid[rowIndex][colIndex] ? 'correct' : 'incorrect' : ''}`}\n                onClick={() => handleAnswerClick(rowIndex, colIndex)}\n              >\n                {cell}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n      <button onClick={() => { if (checkWord()) { alert('Correct!'); } else { alert('Incorrect. Please try again.'); } }}>Check Word</button>\n    </div>\n  );\n}\n\nexport default Questions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}