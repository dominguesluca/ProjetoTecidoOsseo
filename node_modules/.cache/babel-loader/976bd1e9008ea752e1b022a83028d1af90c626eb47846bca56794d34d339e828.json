{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport End from './End';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const questions = [{\n    question: 'São tipos de tecido ósseo',\n    correctAnswers: ['COMPACTO', 'ESPONJOSO']\n  }, {\n    question: 'Classificação histológica dos ossos',\n    correctAnswers: ['IMATURO', 'LAMELAR']\n  }, {\n    question: 'São duas camadas principais dos ossos',\n    correctAnswers: ['ENDÓSTEO', 'PERIOSTEO']\n  }, {\n    question: 'Celula responsável pela produção de atriz ossea',\n    correctAnswers: ['OSTEOBLASTO']\n  }, {\n    question: 'Principais minerais presentes nos ossos',\n    correctAnswers: ['CÁLCIO', 'FÓSFORO']\n  }\n\n  // Add the rest of the questions...\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array.from({\n    length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0)\n  }, () => ''));\n  const [wordGrid, setWordGrid] = useState([]);\n  const gridSize = wordGrid.length || 8; // Set gridSize to the actual grid length or 8 if it's not defined yet\n  const [currentAnswerIsCorrect, setCurrentAnswerIsCorrect] = useState(false);\n  useEffect(() => {\n    if (questions.length > 0 && !wordGrid.length) {\n      // Verifica se questions está definido e se ainda não gerou o grid\n      generateWordGrid();\n      setSelectedAnswers(Array.from({\n        length: wordGrid.length * wordGrid.length\n      }, () => ''));\n    }\n  }, [currentQuestion, questions, wordGrid]);\n  const generateWordGrid = () => {\n    const longestWordLength = Math.max(...questions[currentQuestion].correctAnswers.map(word => word.length));\n    const gridSize = Math.max(8, longestWordLength);\n    const grid = Array.from({\n      length: gridSize\n    }, () => Array(gridSize).fill(''));\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    questions[currentQuestion].correctAnswers.forEach((word, index) => {\n      const [row, col] = findEmptyCell(grid);\n      if (row !== -1 && col !== -1) {\n        placeWord(grid, row, col, word.toUpperCase(), index % 2 === 0 ? 0 : 1);\n      }\n    });\n  };\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < length; i++) {\n        if (col + i >= grid.length || col + i < 0 || grid[row][(col + i + grid.length) % grid.length] !== '') {\n          return false;\n        }\n      }\n    } else {\n      for (let i = 0; i < length; i++) {\n        if (row + i >= grid.length || row + i < 0 || grid[(row + i + grid.length) % grid.length][col] !== '') {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][(col + i + grid.length) % grid.length] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[(row + i + grid.length) % grid.length][col] = word[i];\n      }\n    }\n  };\n  const fillEmptyCells = (grid, availableChars) => {\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[row].length; col++) {\n        if (grid[row][col] === '') {\n          const randomIndex = Math.floor(Math.random() * availableChars.length);\n          grid[row][col] = availableChars[randomIndex];\n        }\n      }\n    }\n  };\n  const handleAnswerClick = (row, col) => {\n    if (wordGrid.length) {\n      const newSelectedAnswers = [...selectedAnswers];\n      newSelectedAnswers[row * gridSize + col] = wordGrid[row][col];\n      setSelectedAnswers(newSelectedAnswers);\n      console.log('Clicked Answer:', wordGrid[row][col]);\n    }\n  };\n  const checkWord = () => {\n    const allCorrectAnswersSelected = questions.every((question, index) => {\n      if (selectedAnswers[index] === undefined) return false;\n      const correctAnswers = question.correctAnswers;\n      const selectedAnswersArray = selectedAnswers[index].split('');\n      const selectedAnswersSet = new Set(selectedAnswersArray);\n      const allCorrectAnswersSelected = correctAnswers.every(answer => {\n        const answerSet = new Set(answer.split(''));\n        const selectedAnswerArray = Array.from(selectedAnswersSet).filter(letter => answer.includes(letter));\n        return answerSet.size === selectedAnswerArray.length && answer.every(letter => selectedAnswerArray.includes(letter));\n      });\n      return allCorrectAnswersSelected;\n    });\n    return allCorrectAnswersSelected;\n  };\n  console.log('Selected Answers:', selectedAnswers);\n  useEffect(() => {\n    if (currentQuestion < questions.length) {\n      const allCorrectAnswersSelected = checkWord();\n      if (allCorrectAnswersSelected) {\n        setCurrentAnswerIsCorrect(true);\n      }\n    } else {\n      setCurrentAnswerIsCorrect(true);\n    }\n  }, [selectedAnswers, currentQuestion]);\n  console.log('currentQuestion:', currentQuestion);\n  console.log('currentAnswerIsCorrect:', currentAnswerIsCorrect);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-container\",\n    children: [questions.length > 0 && currentQuestion < questions.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-background\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"question\",\n        children: questions[currentQuestion].question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(End, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), questions.length > 0 && currentQuestion < questions.length && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-grid\",\n        children: wordGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-grid-row\",\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `word-grid-cell ${cell && selectedAnswers[rowIndex * gridSize + colIndex] ? 'selected' : ''}`,\n            onClick: () => handleAnswerClick(rowIndex, colIndex),\n            children: cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 19\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), currentQuestion < questions.length && currentAnswerIsCorrect && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: () => setCurrentQuestion(currentQuestion + 1),\n      children: \"Pr\\xF3xima\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this), currentQuestion > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: () => setCurrentQuestion(currentQuestion - 1),\n      children: \"Voltar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"9VskZub64RBq1jzp0QZYdkuaiXQ=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","End","jsxDEV","_jsxDEV","Questions","_s","questions","question","correctAnswers","currentQuestion","setCurrentQuestion","selectedAnswers","setSelectedAnswers","Array","from","length","reduce","acc","answer","wordGrid","setWordGrid","gridSize","currentAnswerIsCorrect","setCurrentAnswerIsCorrect","generateWordGrid","longestWordLength","Math","max","map","word","grid","fill","availableChars","forEach","index","row","col","findEmptyCell","placeWord","toUpperCase","canPlaceWord","direction","i","fillEmptyCells","randomIndex","floor","random","handleAnswerClick","newSelectedAnswers","console","log","checkWord","allCorrectAnswersSelected","every","undefined","selectedAnswersArray","split","selectedAnswersSet","Set","answerSet","selectedAnswerArray","filter","letter","includes","size","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rowIndex","cell","colIndex","onClick","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport End from './End';\n\n\nconst Questions = () => {\n  const questions = [\n    {\n      question: 'São tipos de tecido ósseo',\n      correctAnswers: ['COMPACTO', 'ESPONJOSO']\n    },\n    {\n      question: 'Classificação histológica dos ossos',\n      correctAnswers: ['IMATURO', 'LAMELAR']\n    },\n\n    {\n      question:'São duas camadas principais dos ossos',\n      correctAnswers:['ENDÓSTEO', 'PERIOSTEO']\n    },\n    {\n      question:'Celula responsável pela produção de atriz ossea',\n      correctAnswers:['OSTEOBLASTO']\n    },\n    {\n      question:'Principais minerais presentes nos ossos',\n      correctAnswers:['CÁLCIO','FÓSFORO']\n    },\n   \n\n    // Add the rest of the questions...\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array.from({ length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0) }, () => ''));\n  const [wordGrid, setWordGrid] = useState([]);\n  const gridSize = wordGrid.length || 8; // Set gridSize to the actual grid length or 8 if it's not defined yet\n  const [currentAnswerIsCorrect, setCurrentAnswerIsCorrect] = useState(false); \n\n\n  useEffect(() => {\n    if (questions.length > 0 && !wordGrid.length) { // Verifica se questions está definido e se ainda não gerou o grid\n      generateWordGrid();\n      setSelectedAnswers(Array.from({ length: wordGrid.length * wordGrid.length }, () => ''));\n    }\n  }, [currentQuestion, questions, wordGrid]);\n\n  const generateWordGrid = () => {\n    const longestWordLength = Math.max(...questions[currentQuestion].correctAnswers.map(word => word.length));\n    const gridSize = Math.max(8, longestWordLength);\n    const grid = Array.from({ length: gridSize }, () => Array(gridSize).fill(''));\n\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    questions[currentQuestion].correctAnswers.forEach((word, index) => {\n      const [row, col] = findEmptyCell(grid);\n      if (row !== -1 && col !== -1) {\n        placeWord(grid, row, col, word.toUpperCase(), index % 2 === 0 ? 0 : 1);\n      }\n    });\n  };\n\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < length; i++) {\n        if (col + i >= grid.length || col + i < 0 || grid[row][(col + i + grid.length) % grid.length] !== '') {\n          return false;\n        }\n      }\n    } else {\n      for (let i = 0; i < length; i++) {\n        if (row + i >= grid.length || row + i < 0 || grid[(row + i + grid.length) % grid.length][col] !== '') {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][(col + i + grid.length) % grid.length] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[(row + i + grid.length) % grid.length][col] = word[i];\n      }\n    }\n  };\n\n  const fillEmptyCells = (grid, availableChars) => {\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[row].length; col++) {\n        if (grid[row][col] === '') {\n          const randomIndex = Math.floor(Math.random() * availableChars.length);\n          grid[row][col] = availableChars[randomIndex];\n        }\n      }\n    }\n  };\n\n  const handleAnswerClick = (row, col) => {\n    if (wordGrid.length) {\n      const newSelectedAnswers = [...selectedAnswers];\n      newSelectedAnswers[row * gridSize + col] = wordGrid[row][col];\n      setSelectedAnswers(newSelectedAnswers);\n      console.log('Clicked Answer:', wordGrid[row][col]);\n    }\n  };\n\n  const checkWord = () => {\n    const allCorrectAnswersSelected = questions.every((question, index) => {\n      if (selectedAnswers[index] === undefined) return false;\n      const correctAnswers = question.correctAnswers;\n      const selectedAnswersArray = selectedAnswers[index].split('');\n      const selectedAnswersSet = new Set(selectedAnswersArray);\n      const allCorrectAnswersSelected = correctAnswers.every(answer => {\n        const answerSet = new Set(answer.split(''));\n        const selectedAnswerArray = Array.from(selectedAnswersSet).filter(letter => answer.includes(letter));\n        return answerSet.size === selectedAnswerArray.length && answer.every(letter => selectedAnswerArray.includes(letter));\n      });\n      return allCorrectAnswersSelected;\n    });\n  \n    return allCorrectAnswersSelected;\n  };\n\n \n\n  console.log('Selected Answers:', selectedAnswers);\n  useEffect(() => {\n    if (currentQuestion < questions.length) {\n      const allCorrectAnswersSelected = checkWord();\n      if (allCorrectAnswersSelected) {\n        setCurrentAnswerIsCorrect(true);\n      }\n    } else {\n      setCurrentAnswerIsCorrect(true);\n    }\n  }, [selectedAnswers, currentQuestion]);\n\n  console.log('currentQuestion:', currentQuestion);\n  console.log('currentAnswerIsCorrect:', currentAnswerIsCorrect);\n  \n  \n  return (\n    <div className=\"questions-container\">\n    {questions.length > 0 && currentQuestion < questions.length ? (\n      <div className=\"question-background\">\n        <h2 className=\"question\">{questions[currentQuestion].question}</h2>\n      </div>\n    ) : (\n      <End />\n    )}\n    {questions.length > 0 && currentQuestion < questions.length && (\n      <div className=\"grid-container\">\n          <div className=\"word-grid\">\n            {wordGrid.map((row, rowIndex) => (\n              <div key={rowIndex} className=\"word-grid-row\">\n                {row.map((cell, colIndex) => (\n                  <div\n                    key={colIndex}\n                    className={`word-grid-cell ${cell && selectedAnswers[rowIndex * gridSize + colIndex]? 'selected' : ''}`}\n                    onClick={() => handleAnswerClick(rowIndex, colIndex)}\n                  >\n                    {cell}\n                  </div>\n                ))}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {currentQuestion < questions.length && currentAnswerIsCorrect && (\n        <button className=\"next-button\" onClick={() => setCurrentQuestion(currentQuestion + 1)}>\n          Próxima\n        </button>\n      )}\n      {currentQuestion > 0 && (\n        <button className=\"next-button\" onClick={() => setCurrentQuestion(currentQuestion - 1)}>\n          Voltar\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Questions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}