{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  // Definindo as perguntas e respostas\n  const questions = [{\n    question: '1. Quais são os tipos de tecido ósseo?',\n    answer: 'compacto, esponjoso'\n  }, {\n    question: '2. Qual é a classificação histológica dos ossos?',\n    answer: 'Imaturo, lamelar'\n  }, {\n    question: '3. Quais são os tipos de ossificação?',\n    answer: 'Intramembranosa, endocondral'\n  }, {\n    question: '4. Quais são as duas camadas principais dos ossos?',\n    answer: 'Endósteo, periósteo'\n  }, {\n    question: '5. Qual é a célula responsável pela produção de matriz óssea?',\n    answer: 'Osteoblasto'\n  }, {\n    question: '6. Quais são os principais minerais presentes nos ossos?',\n    answer: 'Cálcio e fósforo'\n  }];\n\n  // Estado para controlar a pergunta atual\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n\n  // Estado para armazenar o dashboard de palavras para cada pergunta\n  const [wordGrids, setWordGrids] = useState([]);\n\n  // Função para gerar um dashboard de palavras 15x15\n  const generateWordGrid = () => {\n    const grid = [];\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'; // Lista de letras maiúsculas\n\n    for (let i = 0; i < 15; i++) {\n      const row = [];\n      for (let j = 0; j < 15; j++) {\n        // Seleciona aleatoriamente um caractere da lista e insere na célula\n        const randomIndex = Math.floor(Math.random() * characters.length);\n        const randomChar = characters[randomIndex];\n        row.push(randomChar);\n      }\n      grid.push(row);\n    }\n    return grid;\n  };\n\n  // Função para avançar para a próxima pergunta\n  const nextQuestion = () => {\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      // Aqui você pode adicionar lógica para lidar com o término das perguntas, se necessário\n      console.log('Fim das perguntas');\n    }\n  };\n\n  // Efeito para gerar o dashboard de palavras para cada pergunta ao carregar o componente\n  useEffect(() => {\n    const grids = questions.map(() => generateWordGrid());\n    setWordGrids(grids);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question\",\n      children: questions[currentQuestion].question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-grid\",\n      children: wordGrids[currentQuestion] && wordGrids[currentQuestion].map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-grid-row\",\n        children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-grid-cell\",\n          children: cell\n        }, cellIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: nextQuestion,\n      children: \"Pr\\xF3xima\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"gv2coC9VROo6F8yOsAt41QFB0as=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Questions","_s","questions","question","answer","currentQuestion","setCurrentQuestion","wordGrids","setWordGrids","generateWordGrid","grid","characters","i","row","j","randomIndex","Math","floor","random","length","randomChar","push","nextQuestion","console","log","grids","map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rowIndex","cell","cellIndex","onClick","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  // Definindo as perguntas e respostas\n  const questions = [\n    {\n      question: '1. Quais são os tipos de tecido ósseo?',\n      answer: 'compacto, esponjoso',\n    },\n    {\n      question: '2. Qual é a classificação histológica dos ossos?',\n      answer: 'Imaturo, lamelar',\n    },\n    {\n      question: '3. Quais são os tipos de ossificação?',\n      answer: 'Intramembranosa, endocondral',\n    },\n    {\n      question: '4. Quais são as duas camadas principais dos ossos?',\n      answer: 'Endósteo, periósteo',\n    },\n    {\n      question: '5. Qual é a célula responsável pela produção de matriz óssea?',\n      answer: 'Osteoblasto',\n    },\n    {\n      question: '6. Quais são os principais minerais presentes nos ossos?',\n      answer: 'Cálcio e fósforo',\n    },\n  ];\n\n  // Estado para controlar a pergunta atual\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n\n  // Estado para armazenar o dashboard de palavras para cada pergunta\n  const [wordGrids, setWordGrids] = useState([]);\n\n  // Função para gerar um dashboard de palavras 15x15\n  const generateWordGrid = () => {\n    const grid = [];\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'; // Lista de letras maiúsculas\n  \n    for (let i = 0; i < 15; i++) {\n      const row = [];\n      for (let j = 0; j < 15; j++) {\n        // Seleciona aleatoriamente um caractere da lista e insere na célula\n        const randomIndex = Math.floor(Math.random() * characters.length);\n        const randomChar = characters[randomIndex];\n        row.push(randomChar);\n      }\n      grid.push(row);\n    }\n    return grid;\n  };\n\n  // Função para avançar para a próxima pergunta\n  const nextQuestion = () => {\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      // Aqui você pode adicionar lógica para lidar com o término das perguntas, se necessário\n      console.log('Fim das perguntas');\n    }\n  };\n\n  // Efeito para gerar o dashboard de palavras para cada pergunta ao carregar o componente\n  useEffect(() => {\n    const grids = questions.map(() => generateWordGrid());\n    setWordGrids(grids);\n  }, []);\n\n  return (\n    <div className=\"questions-container\">\n      <div className=\"question\">{questions[currentQuestion].question}</div>\n      {/* Aqui você pode renderizar o dashboard de palavras */}\n      <div className=\"word-grid\">\n        {wordGrids[currentQuestion] &&\n          wordGrids[currentQuestion].map((row, rowIndex) => (\n            <div key={rowIndex} className=\"word-grid-row\">\n              {row.map((cell, cellIndex) => (\n                <div key={cellIndex} className=\"word-grid-cell\">{cell}</div>\n              ))}\n            </div>\n          ))}\n      </div>\n      <button className=\"next-button\" onClick={nextQuestion}>Próxima</button>\n    </div>\n  );\n};\n\nexport default Questions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}