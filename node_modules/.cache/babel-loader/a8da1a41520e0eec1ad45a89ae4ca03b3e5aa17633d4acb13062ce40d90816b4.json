{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\n// Questions.js\nimport React, { useState } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const questions = [{\n    question: 'São tipos de tecido osseo?',\n    answers: ['Compacto', 'Esponjoso'],\n    correctAnswers: ['Compacto', 'Esponjoso']\n  }, {\n    question: 'Classificação histologica dos ossos',\n    answers: ['Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['Imaturo, lamelar']\n  }\n  // Restante das perguntas...\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showNextButton, setShowNextButton] = useState(false);\n  const handleAnswerClick = answer => {\n    setSelectedAnswer(answer);\n    setShowNextButton(true);\n  };\n  const handleNextButtonClick = () => {\n    setSelectedAnswer(null);\n    setShowNextButton(false);\n    setCurrentQuestion(currentQuestion + 1);\n  };\n  const handleTouchStart = answer => {\n    setSelectedAnswer(answer);\n  };\n  const handleTouchEnd = () => {\n    setShowNextButton(true);\n  };\n\n  // Função para gerar letras aleatórias\n  const generateRandomLetter = () => {\n    const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    return alphabet[Math.floor(Math.random() * alphabet.length)];\n  };\n\n  // Função para preencher o grid de caça-palavras\n  const fillGridWithWords = words => {\n    const gridSize = 15;\n    const grid = [];\n    for (let i = 0; i < gridSize; i++) {\n      const row = [];\n      for (let j = 0; j < gridSize; j++) {\n        row.push(generateRandomLetter());\n      }\n      grid.push(row);\n    }\n    // Inserir as palavras corretas no grid\n    words.forEach(word => {\n      const [startX, startY] = [Math.floor(Math.random() * gridSize), Math.floor(Math.random() * gridSize)];\n      const isVertical = Math.random() < 0.5;\n      const isNegativeDirection = Math.random() < 0.5;\n      const increment = isNegativeDirection ? -1 : 1;\n      const [dx, dy] = isVertical ? [0, increment] : [increment, 0];\n      let x = startX;\n      let y = startY;\n      for (let i = 0; i < word.length; i++) {\n        if (x < 0 || x >= gridSize || y < 0 || y >= gridSize || grid[y][x] !== '') {\n          // Se a palavra não couber no grid ou colidir com outra palavra, tentar novamente\n          return fillGridWithWords(words);\n        }\n        grid[y][x] = word[i];\n        x += dx;\n        y += dy;\n      }\n    });\n    return grid;\n  };\n  const grid = fillGridWithWords(questions[currentQuestion].correctAnswers);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"question\",\n      children: questions[currentQuestion].question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answers-container\",\n      children: questions[currentQuestion].answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `answer ${selectedAnswer === answer ? 'selected' : ''}`,\n        onClick: () => handleAnswerClick(answer),\n        onTouchStart: () => handleTouchStart(answer),\n        onTouchEnd: handleTouchEnd,\n        children: answer\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), showNextButton && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: handleNextButtonClick,\n      children: \"Pr\\xF3xima\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-grid\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-row\",\n        children: row.map((letter, columnIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-cell\",\n          children: letter\n        }, columnIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"c0Y1dYPGB4lq/RsFuHK75Knljl0=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Questions","_s","questions","question","answers","correctAnswers","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","showNextButton","setShowNextButton","handleAnswerClick","answer","handleNextButtonClick","handleTouchStart","handleTouchEnd","generateRandomLetter","alphabet","Math","floor","random","length","fillGridWithWords","words","gridSize","grid","i","row","j","push","forEach","word","startX","startY","isVertical","isNegativeDirection","increment","dx","dy","x","y","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","onTouchStart","onTouchEnd","rowIndex","letter","columnIndex","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["// Questions.js\nimport React, { useState } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  const questions = [\n    {\n      question: 'São tipos de tecido osseo?',\n      answers: ['Compacto', 'Esponjoso'],\n      correctAnswers: ['Compacto', 'Esponjoso']\n    },\n    {\n      question: 'Classificação histologica dos ossos',\n      answers: ['Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['Imaturo, lamelar']\n    }\n    // Restante das perguntas...\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showNextButton, setShowNextButton] = useState(false);\n\n  const handleAnswerClick = (answer) => {\n    setSelectedAnswer(answer);\n    setShowNextButton(true);\n  };\n\n  const handleNextButtonClick = () => {\n    setSelectedAnswer(null);\n    setShowNextButton(false);\n    setCurrentQuestion(currentQuestion + 1);\n  };\n\n  const handleTouchStart = (answer) => {\n    setSelectedAnswer(answer);\n  };\n\n  const handleTouchEnd = () => {\n    setShowNextButton(true);\n  };\n\n  // Função para gerar letras aleatórias\n  const generateRandomLetter = () => {\n    const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    return alphabet[Math.floor(Math.random() * alphabet.length)];\n  };\n\n  // Função para preencher o grid de caça-palavras\n  const fillGridWithWords = (words) => {\n    const gridSize = 15;\n    const grid = [];\n    for (let i = 0; i < gridSize; i++) {\n      const row = [];\n      for (let j = 0; j < gridSize; j++) {\n        row.push(generateRandomLetter());\n      }\n      grid.push(row);\n    }\n    // Inserir as palavras corretas no grid\n    words.forEach(word => {\n      const [startX, startY] = [Math.floor(Math.random() * gridSize), Math.floor(Math.random() * gridSize)];\n      const isVertical = Math.random() < 0.5;\n      const isNegativeDirection = Math.random() < 0.5;\n      const increment = isNegativeDirection ? -1 : 1;\n      const [dx, dy] = isVertical ? [0, increment] : [increment, 0];\n      let x = startX;\n      let y = startY;\n      for (let i = 0; i < word.length; i++) {\n        if (x < 0 || x >= gridSize || y < 0 || y >= gridSize || grid[y][x] !== '') {\n          // Se a palavra não couber no grid ou colidir com outra palavra, tentar novamente\n          return fillGridWithWords(words);\n        }\n        grid[y][x] = word[i];\n        x += dx;\n        y += dy;\n      }\n    });\n    return grid;\n  };\n\n  const grid = fillGridWithWords(questions[currentQuestion].correctAnswers);\n\n  return (\n    <div className=\"questions-container\">\n      <h2 className=\"question\">{questions[currentQuestion].question}</h2>\n      <div className=\"answers-container\">\n        {questions[currentQuestion].answers.map((answer, index) => (\n          <div\n            key={index}\n            className={`answer ${selectedAnswer === answer ? 'selected' : ''}`}\n            onClick={() => handleAnswerClick(answer)}\n            onTouchStart={() => handleTouchStart(answer)}\n            onTouchEnd={handleTouchEnd}\n          >\n            {answer}\n          </div>\n        ))}\n      </div>\n      {showNextButton && (\n        <button className=\"next-button\" onClick={handleNextButtonClick}>Próxima</button>\n      )}\n\n      {/* Grid de caça-palavras */}\n      <div className=\"word-grid\">\n        {grid.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"word-row\">\n            {row.map((letter, columnIndex) => (\n              <div key={columnIndex} className=\"word-cell\">{letter}</div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Questions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}