{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const questions = [{\n    question: 'São tipos de tecido ósseo?',\n    answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['COMPACTO', 'ESPONJOSO']\n  }, {\n    question: 'Classificação histológica dos ossos',\n    answers: ['Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['IMATURO', 'LAMELAR']\n  }\n  // Adicione o restante das perguntas...\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array.from({\n    length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0)\n  }, () => ''));\n  const [wordGrid, setWordGrid] = useState([]);\n  const [showNextButton, setShowNextButton] = useState(false);\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n  const generateWordGrid = () => {\n    const grid = Array.from({\n      length: 8\n    }, () => Array(8).fill(''));\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    questions[currentQuestion].correctAnswers.forEach(word => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Seleciona uma direção aleatória: horizontal (0) ou vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n      do {\n        row = Math.floor(Math.random() * 8);\n        col = Math.floor(Math.random() * 8);\n        tries++;\n        if (tries > 100) return; // Evita loop infinito\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n      placeWord(grid, row, col, word, direction);\n    });\n\n    // Preenche as células vazias com caracteres aleatórios\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (!grid[row][col]) {\n          grid[row][col] = availableChars[Math.floor(Math.random() * availableChars.length)];\n        }\n      }\n    }\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0 && col + length > 8) return false; // Fora dos limites na horizontal\n    if (direction === 1 && row + length > 8) return false; // Fora dos limites na vertical\n\n    for (let i = 0; i < length; i++) {\n      if (direction === 0 && grid[row][col + i]) return false; // Horizontal: célula ocupada\n      if (direction === 1 && grid[row + i][col]) return false; // Vertical: célula ocupada\n    }\n    return true;\n  };\n  const placeWord = (grid, row, col, word, direction) => {\n    for (let i = 0; i < word.length; i++) {\n      if (direction === 0) {\n        grid[row][col + i] = word[i];\n      } else {\n        grid[row + i][col] = word[i];\n      }\n    }\n  };\n  const handleSelectAnswer = index => {\n    setSelectedAnswers([...selectedAnswers.slice(0, index), questions[currentQuestion].correctAnswers[index], ...selectedAnswers.slice(index + 1)]);\n    if (selectedAnswers.every((answer, i) => answer === questions[currentQuestion].correctAnswers[i])) {\n      setShowNextButton(true);\n    }\n  };\n  const handleNextQuestion = () => {\n    setCurrentQuestion(currentQuestion + 1);\n    setSelectedAnswers(Array.from({\n      length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0)\n    }, () => ''));\n    setShowNextButton(false);\n  };\n  const handleBackToQuestion = () => {\n    setCurrentQuestion(currentQuestion - 1);\n    setSelectedAnswers(Array.from({\n      length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0)\n    }, () => ''));\n    setShowNextButton(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Questions\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: questions[currentQuestion].question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers\",\n        children: questions[currentQuestion].answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSelectAnswer(index),\n          disabled: selectedAnswers[index] !== '',\n          children: answer\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), showNextButton && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextQuestion,\n        children: \"Pr\\xF3xima\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), currentQuestion > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToQuestion,\n        children: \"Voltar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-grid\",\n      children: wordGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((char, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `cell ${questions[currentQuestion].correctAnswers.some(word => word.includes(char)) ? 'correct' : ''}`,\n          children: char\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"o2rheytiRYtam3ukWlH5AHfdDhk=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Questions","_s","questions","question","answers","correctAnswers","currentQuestion","setCurrentQuestion","selectedAnswers","setSelectedAnswers","Array","from","length","reduce","acc","answer","wordGrid","setWordGrid","showNextButton","setShowNextButton","generateWordGrid","grid","fill","availableChars","forEach","word","wordLength","row","col","tries","direction","Math","random","floor","canPlaceWord","placeWord","console","log","i","handleSelectAnswer","index","slice","every","handleNextQuestion","handleBackToQuestion","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","disabled","rowIndex","char","colIndex","some","includes","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  const questions = [\n    {\n      question: 'São tipos de tecido ósseo?',\n      answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['COMPACTO', 'ESPONJOSO']\n    },\n    {\n      question: 'Classificação histológica dos ossos',\n      answers: ['Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['IMATURO', 'LAMELAR']\n    }\n    // Adicione o restante das perguntas...\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array.from({ length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0) }, () => ''));\n  const [wordGrid, setWordGrid] = useState([]);\n  const [showNextButton, setShowNextButton] = useState(false);\n\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n\n  const generateWordGrid = () => {\n    const grid = Array.from({ length: 8 }, () => Array(8).fill(''));\n\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    questions[currentQuestion].correctAnswers.forEach((word) => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Seleciona uma direção aleatória: horizontal (0) ou vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n\n      do {\n        row = Math.floor(Math.random() * 8);\n        col = Math.floor(Math.random() * 8);\n        tries++;\n        if (tries > 100) return; // Evita loop infinito\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n\n      placeWord(grid, row, col, word, direction);\n    });\n\n    // Preenche as células vazias com caracteres aleatórios\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (!grid[row][col]) {\n          grid[row][col] = availableChars[Math.floor(Math.random() * availableChars.length)];\n        }\n      }\n    }\n\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0 && col + length > 8) return false; // Fora dos limites na horizontal\n    if (direction === 1 && row + length > 8) return false; // Fora dos limites na vertical\n\n    for (let i = 0; i < length; i++) {\n      if (direction === 0 && grid[row][col + i]) return false; // Horizontal: célula ocupada\n      if (direction === 1 && grid[row + i][col]) return false; // Vertical: célula ocupada\n    }\n\n    return true;\n  };\n\n  const placeWord = (grid, row, col, word, direction) => {\n    for (let i = 0; i < word.length; i++) {\n      if (direction === 0) {\n        grid[row][col + i] = word[i];\n      } else {\n        grid[row + i][col] = word[i];\n      }\n    }\n  };\n\n  const handleSelectAnswer = (index) => {\n    setSelectedAnswers([...selectedAnswers.slice(0, index), questions[currentQuestion].correctAnswers[index], ...selectedAnswers.slice(index + 1)]);\n\n    if (selectedAnswers.every((answer, i) => answer === questions[currentQuestion].correctAnswers[i])) {\n      setShowNextButton(true);\n    }\n  };\n\n  const handleNextQuestion = () => {\n    setCurrentQuestion(currentQuestion + 1);\n    setSelectedAnswers(Array.from({ length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0) }, () => ''));\n    setShowNextButton(false);\n  };\n\n  const handleBackToQuestion = () => {\n    setCurrentQuestion(currentQuestion - 1);\n    setSelectedAnswers(Array.from({ length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0) }, () => ''));\n    setShowNextButton(false);\n  };\n\n  return (\n    <div className=\"Questions\">\n      <div className=\"question\">\n        <h2>{questions[currentQuestion].question}</h2>\n        <div className=\"answers\">\n          {questions[currentQuestion].answers.map((answer, index) => (\n            <button key={index} onClick={() => handleSelectAnswer(index)} disabled={selectedAnswers[index] !== ''}>\n              {answer}\n            </button>\n          ))}\n        </div>\n        {showNextButton && (\n          <button onClick={handleNextQuestion}>Próxima</button>\n        )}\n        {currentQuestion > 0 && (\n          <button onClick={handleBackToQuestion}>Voltar</button>\n        )}\n      </div>\n      <div className=\"word-grid\">\n        {wordGrid.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((char, colIndex) => (\n              <div key={colIndex} className={`cell ${questions[currentQuestion].correctAnswers.some(word => word.includes(char)) ? 'correct' : ''}`}>\n                {char}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Questions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}