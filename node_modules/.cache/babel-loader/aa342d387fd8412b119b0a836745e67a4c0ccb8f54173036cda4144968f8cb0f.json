{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport wordSearchGenerator from './wordSearchGenerator';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [wordGrid, setWordGrid] = useState([]);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [isNextButtonDisabled, setIsNextButtonDisabled] = useState(true);\n  useEffect(() => {\n    fetchQuestions();\n  }, []);\n  useEffect(() => {\n    if (questions.length > 0) {\n      generateWordGrid();\n    }\n  }, [currentQuestion, questions]);\n  const fetchQuestions = async () => {\n    try {\n      const response = await axios.get('https://wordsearchapi.com/api/v1/random');\n      setQuestions(response.data.map(question => ({\n        ...question,\n        correctAnswers: question.answer.split(',')\n      })));\n    } catch (error) {\n      console.error('Error fetching questions:', error);\n    }\n  };\n  const generateWordGrid = () => {\n    const grid = wordSearchGenerator.generateGrid(questions[currentQuestion].correctAnswers);\n    setWordGrid(grid);\n    setSelectedAnswers(Array(grid.length * grid[0].length).fill(''));\n    setIsNextButtonDisabled(true);\n  };\n  const handleAnswerClick = (row, col) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[row * wordGrid.length + col] = wordGrid[row][col];\n    setSelectedAnswers(newSelectedAnswers);\n    const selectedWord = newSelectedAnswers.join('');\n    const isCorrect = questions[currentQuestion].correctAnswers.some(word => word === selectedWord);\n    setIsNextButtonDisabled(!isCorrect);\n  };\n  const handleNextQuestion = () => {\n    setCurrentQuestion(currentQuestion + 1);\n  };\n  if (questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this);\n  }\n  const question = questions[currentQuestion];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-background\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"question\",\n        children: question.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-grid\",\n        children: wordGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-grid-row\",\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `word-grid-cell ${cell ? 'populated' : ''} ${selectedAnswers[rowIndex * wordGrid.length + colIndex] ? 'selected' : ''}`,\n            onClick: () => handleAnswerClick(rowIndex, colIndex),\n            children: cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: handleNextQuestion,\n      disabled: isNextButtonDisabled,\n      children: \"Pr\\xF3xima quest\\xE3o\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"Pctv8hbmrYnYnqEC35OchAAxH/o=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","axios","wordSearchGenerator","jsxDEV","_jsxDEV","Questions","_s","questions","setQuestions","currentQuestion","setCurrentQuestion","wordGrid","setWordGrid","selectedAnswers","setSelectedAnswers","isNextButtonDisabled","setIsNextButtonDisabled","fetchQuestions","length","generateWordGrid","response","get","data","map","question","correctAnswers","answer","split","error","console","grid","generateGrid","Array","fill","handleAnswerClick","row","col","newSelectedAnswers","selectedWord","join","isCorrect","some","word","handleNextQuestion","children","fileName","_jsxFileName","lineNumber","columnNumber","className","rowIndex","cell","colIndex","onClick","disabled","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport wordSearchGenerator from './wordSearchGenerator';\nimport './Questions.css';\n\nconst Questions = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [wordGrid, setWordGrid] = useState([]);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [isNextButtonDisabled, setIsNextButtonDisabled] = useState(true);\n\n  useEffect(() => {\n    fetchQuestions();\n  }, []);\n\n  useEffect(() => {\n    if (questions.length > 0) {\n      generateWordGrid();\n    }\n  }, [currentQuestion, questions]);\n\n  const fetchQuestions = async () => {\n    try {\n      const response = await axios.get('https://wordsearchapi.com/api/v1/random');\n      setQuestions(response.data.map(question => ({\n        ...question,\n        correctAnswers: question.answer.split(',')\n      })));\n    } catch (error) {\n      console.error('Error fetching questions:', error);\n    }\n  };\n\n  const generateWordGrid = () => {\n    const grid = wordSearchGenerator.generateGrid(questions[currentQuestion].correctAnswers);\n    setWordGrid(grid);\n    setSelectedAnswers(Array(grid.length * grid[0].length).fill(''));\n    setIsNextButtonDisabled(true);\n  };\n\n  const handleAnswerClick = (row, col) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[row * wordGrid.length + col] = wordGrid[row][col];\n    setSelectedAnswers(newSelectedAnswers);\n\n    const selectedWord = newSelectedAnswers.join('');\n    const isCorrect = questions[currentQuestion].correctAnswers.some(word => word === selectedWord);\n    setIsNextButtonDisabled(!isCorrect);\n  };\n\n  const handleNextQuestion = () => {\n    setCurrentQuestion(currentQuestion + 1);\n  };\n\n  if (questions.length === 0) {\n    return <div>Loading...</div>;\n  }\n\n  const question = questions[currentQuestion];\n  return (\n    <div className=\"questions-container\">\n      <div className=\"question-background\">\n        <h2 className=\"question\">{question.question}</h2>\n      </div>\n      <div className=\"grid-container\">\n        <div className=\"word-grid\">\n          {wordGrid.map((row, rowIndex) => (\n            <div key={rowIndex} className=\"word-grid-row\">\n              {row.map((cell, colIndex) => (\n                <div\n                  key={colIndex}\n                  className={`word-grid-cell ${cell ? 'populated' : ''} ${selectedAnswers[rowIndex * wordGrid.length + colIndex] ? 'selected' : ''}`}\n                  onClick={() => handleAnswerClick(rowIndex, colIndex)}\n                >\n                  {cell}\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n      <button\n        className=\"next-button\"\n        onClick={handleNextQuestion}\n        disabled={isNextButtonDisabled}\n      >\n        Próxima questão\n      </button>\n    </div>\n  );\n};\n\nexport default Questions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}