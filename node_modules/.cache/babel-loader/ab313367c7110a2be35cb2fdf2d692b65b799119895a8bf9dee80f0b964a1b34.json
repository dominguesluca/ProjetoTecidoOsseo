{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  // Lista de perguntas e respostas sobre tecido ósseo\n  const questions = [{\n    question: 'Quais são os tipos de tecido ósseo?',\n    answer: 'compacto, esponjoso'\n  }, {\n    question: 'Qual é a classificação histológica dos ossos?',\n    answer: 'Imaturo, lamelar'\n  }, {\n    question: 'Quais são os tipos de ossificação?',\n    answer: 'Intramembranosa, endocondral'\n  }, {\n    question: 'Quais são as duas camadas principais dos ossos?',\n    answer: 'Endósteo, periósteo'\n  }, {\n    question: 'Qual célula é responsável pela produção de matriz óssea?',\n    answer: 'Osteoblasto'\n  }, {\n    question: 'Quais são os principais minerais presentes nos ossos?',\n    answer: 'Cálcio e fósforo'\n  }];\n\n  // Função para preencher o grid com palavras aleatórias\n  const fillGridWithWords = () => {\n    const gridLength = 15;\n    const emptyGrid = Array.from({\n      length: gridLength\n    }, () => Array.from({\n      length: gridLength\n    }, () => ''));\n    const wordsList = ['compacto', 'esponjoso', 'Imaturo', 'lamelar', 'Intramembranosa', 'endocondral', 'Endósteo', 'periósteo', 'Osteoblasto', 'Cálcio', 'fósforo'];\n    const filledGrid = emptyGrid.map((row, rowIndex) => row.map((cell, colIndex) => {\n      const randomWord = wordsList[Math.floor(Math.random() * wordsList.length)];\n      return randomWord.charAt(colIndex % randomWord.length);\n    }));\n    return filledGrid;\n  };\n  const [grid, setGrid] = useState([]);\n  useEffect(() => {\n    // Preenche o grid com palavras aleatórias ao montar o componente\n    setGrid(fillGridWithWords());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Perguntas sobre tecido \\xF3sseo:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: questions.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: item.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), \" - Resposta: \", item.answer]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cell\",\n          children: cell\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"w1YSakViRD9z3AUkL5Qso5coyFg=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Questions","_s","questions","question","answer","fillGridWithWords","gridLength","emptyGrid","Array","from","length","wordsList","filledGrid","map","row","rowIndex","cell","colIndex","randomWord","Math","floor","random","charAt","grid","setGrid","className","children","fileName","_jsxFileName","lineNumber","columnNumber","item","index","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  // Lista de perguntas e respostas sobre tecido ósseo\n  const questions = [\n    {\n      question: 'Quais são os tipos de tecido ósseo?',\n      answer: 'compacto, esponjoso'\n    },\n    {\n      question: 'Qual é a classificação histológica dos ossos?',\n      answer: 'Imaturo, lamelar'\n    },\n    {\n      question: 'Quais são os tipos de ossificação?',\n      answer: 'Intramembranosa, endocondral'\n    },\n    {\n      question: 'Quais são as duas camadas principais dos ossos?',\n      answer: 'Endósteo, periósteo'\n    },\n    {\n      question: 'Qual célula é responsável pela produção de matriz óssea?',\n      answer: 'Osteoblasto'\n    },\n    {\n      question: 'Quais são os principais minerais presentes nos ossos?',\n      answer: 'Cálcio e fósforo'\n    }\n  ];\n\n  // Função para preencher o grid com palavras aleatórias\n  const fillGridWithWords = () => {\n    const gridLength = 15;\n    const emptyGrid = Array.from({ length: gridLength }, () =>\n      Array.from({ length: gridLength }, () => '')\n    );\n\n    const wordsList = ['compacto', 'esponjoso', 'Imaturo', 'lamelar', 'Intramembranosa', 'endocondral', 'Endósteo', 'periósteo', 'Osteoblasto', 'Cálcio', 'fósforo'];\n\n    const filledGrid = emptyGrid.map((row, rowIndex) =>\n      row.map((cell, colIndex) => {\n        const randomWord = wordsList[Math.floor(Math.random() * wordsList.length)];\n        return randomWord.charAt(colIndex % randomWord.length);\n      })\n    );\n\n    return filledGrid;\n  };\n\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    // Preenche o grid com palavras aleatórias ao montar o componente\n    setGrid(fillGridWithWords());\n  }, []);\n\n  return (\n    <div className=\"questions-container\">\n      <h2>Perguntas sobre tecido ósseo:</h2>\n      <ul>\n        {questions.map((item, index) => (\n          <li key={index}>\n            <strong>{item.question}</strong> - Resposta: {item.answer}\n          </li>\n        ))}\n      </ul>\n      <div className=\"grid\">\n        {grid.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((cell, colIndex) => (\n              <div key={colIndex} className=\"cell\">\n                {cell}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Questions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}