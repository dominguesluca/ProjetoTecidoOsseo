{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [wordGrid, setWordGrid] = useState([]);\n  const gridSize = wordGrid.length || 8; // Set gridSize to the actual grid length or 8 if it's not defined yet\n\n  useEffect(() => {\n    fetchQuestions();\n  }, []);\n  const fetchQuestions = async () => {\n    try {\n      const response = await axios.get('https://wordsearchapi.com/api/v1/random');\n      setQuestions(response.data);\n    } catch (error) {\n      console.error('Error fetching questions:', error);\n    }\n  };\n  useEffect(() => {\n    generateWordGrid();\n    setSelectedAnswers(Array.from({\n      length: wordGrid.length * wordGrid.length\n    }, () => ''));\n  }, [currentQuestion]);\n  const generateWordGrid = () => {\n    const longestWordLength = Math.max(...questions[currentQuestion].correctAnswers.map(word => word.length));\n    const gridSize = Math.max(8, longestWordLength);\n    const grid = Array.from({\n      length: gridSize\n    }, () => Array(gridSize).fill(''));\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    questions[currentQuestion].correctAnswers.forEach(word => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Select a random direction: horizontal (0) or vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n      do {\n        row = Math.floor(Math.random() * gridSize);\n        col = Math.floor(Math.random() * gridSize);\n        tries++;\n        if (tries > 100) return; // Avoid infinite loop\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n      placeWord(grid, row, col, word, direction);\n    });\n    fillEmptyCells(grid, availableChars);\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < length; i++) {\n        if (col + i >= grid.length || col + i < 0 || grid[row][(col + i + grid.length) % grid.length] !== '') {\n          return false;\n        }\n      }\n    } else {\n      for (let i = 0; i < length; i++) {\n        if (row + i >= grid.length || row + i < 0 || grid[(row + i + grid.length) % grid.length][col] !== '') {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][(col + i + grid.length) % grid.length] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[(row + i + grid.length) % grid.length][col] = word[i];\n      }\n    }\n  };\n  const fillEmptyCells = (grid, availableChars) => {\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid.length; j++) {\n        if (grid[i][j] === '') {\n          grid[i][j] = availableChars[Math.floor(Math.random() * availableChars.length)];\n        }\n      }\n    }\n  };\n  const handleAnswerClick = (row, col) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[row * gridSize + col] = wordGrid[row][col];\n    setSelectedAnswers(newSelectedAnswers);\n    console.log('Clicked Answer:', wordGrid[row][col]);\n  };\n  const checkWord = () => {\n    const selectedWord = selectedAnswers.join('');\n    const correctWords = questions[currentQuestion].correctAnswers;\n    const isCorrect = correctWords.some(word => word === selectedWord);\n    console.log('Selected Word:', selectedWord);\n    console.log('Correct Words:', correctWords);\n    console.log('Is Correct:', isCorrect);\n    return isCorrect;\n  };\n  const allCellsFilled = () => {\n    return selectedAnswers.every(answer => answer !== '');\n  };\n  console.log('Selected Answers:', selectedAnswers);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-background\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"question\",\n        children: questions[currentQuestion].question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-grid\",\n        children: wordGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-grid-row\",\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `word-grid-cell ${cell && selectedAnswers[rowIndex * gridSize + colIndex] ? 'selected' : ''}`,\n            onClick: () => handleAnswerClick(rowIndex, colIndex),\n            children: cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), allCellsFilled() && checkWord() && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: () => setCurrentQuestion(currentQuestion + 1),\n      children: \"Pr\\xF3xima\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"ubJXgzfpkKEdcgfZExHLGTPqsd8=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Questions","_s","questions","setQuestions","currentQuestion","setCurrentQuestion","selectedAnswers","setSelectedAnswers","wordGrid","setWordGrid","gridSize","length","fetchQuestions","response","get","data","error","console","generateWordGrid","Array","from","longestWordLength","Math","max","correctAnswers","map","word","grid","fill","availableChars","forEach","wordLength","row","col","tries","direction","random","floor","canPlaceWord","placeWord","fillEmptyCells","log","i","j","handleAnswerClick","newSelectedAnswers","checkWord","selectedWord","join","correctWords","isCorrect","some","allCellsFilled","every","answer","className","children","question","fileName","_jsxFileName","lineNumber","columnNumber","rowIndex","cell","colIndex","onClick","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Questions.css';\n\nconst Questions = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [wordGrid, setWordGrid] = useState([]);\n  const gridSize = wordGrid.length || 8; // Set gridSize to the actual grid length or 8 if it's not defined yet\n\n  useEffect(() => {\n    fetchQuestions();\n  }, []);\n\n  const fetchQuestions = async () => {\n    try {\n      const response = await axios.get('https://wordsearchapi.com/api/v1/random');\n      setQuestions(response.data);\n    } catch (error) {\n      console.error('Error fetching questions:', error);\n    }\n  };\n\n  useEffect(() => {\n    generateWordGrid();\n    setSelectedAnswers(Array.from({ length: wordGrid.length * wordGrid.length }, () => ''));\n  }, [currentQuestion]);\n\n  const generateWordGrid = () => {\n    const longestWordLength = Math.max(...questions[currentQuestion].correctAnswers.map(word => word.length));\n    const gridSize = Math.max(8, longestWordLength);\n    const grid = Array.from({ length: gridSize }, () => Array(gridSize).fill(''));\n\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    questions[currentQuestion].correctAnswers.forEach((word) => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Select a random direction: horizontal (0) or vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n\n      do {\n        row = Math.floor(Math.random() * gridSize);\n        col = Math.floor(Math.random() * gridSize);\n        tries++;\n        if (tries > 100) return; // Avoid infinite loop\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n\n      placeWord(grid, row, col, word, direction);\n    });\n\n    fillEmptyCells(grid, availableChars);\n\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < length; i++) {\n        if (col + i >= grid.length || col + i < 0 || grid[row][(col + i + grid.length) % grid.length] !== '') {\n          return false;\n        }\n      }\n    } else {\n      for (let i = 0; i < length; i++) {\n        if (row + i >= grid.length || row + i < 0 || grid[(row + i + grid.length) % grid.length][col] !== '') {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][(col + i + grid.length) % grid.length] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[(row + i + grid.length) % grid.length][col] = word[i];\n      }\n    }\n  };\n\n  const fillEmptyCells = (grid, availableChars) => {\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid.length; j++) {\n        if (grid[i][j] === '') {\n          grid[i][j] = availableChars[Math.floor(Math.random() * availableChars.length)];\n        }\n      }\n    }\n  };\n  const handleAnswerClick = (row, col) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[row * gridSize + col] = wordGrid[row][col];\n    setSelectedAnswers(newSelectedAnswers);\n    console.log('Clicked Answer:', wordGrid[row][col]);\n  };\n\n  const checkWord = () => {\n    const selectedWord = selectedAnswers.join('');\n    const correctWords = questions[currentQuestion].correctAnswers;\n    const isCorrect = correctWords.some(word => word === selectedWord);\n    console.log('Selected Word:', selectedWord);\n    console.log('Correct Words:', correctWords);\n    console.log('Is Correct:', isCorrect);\n    return isCorrect;\n  };\n\n  const allCellsFilled = () => {\n    return selectedAnswers.every(answer => answer !== '');\n  };\n\n  console.log('Selected Answers:', selectedAnswers);\n\n  return (\n    <div className=\"questions-container\">\n      <div className=\"question-background\">\n        <h2 className=\"question\">{questions[currentQuestion].question}</h2>\n      </div>\n      <div className=\"grid-container\">\n        <div className=\"word-grid\">\n          {wordGrid.map((row, rowIndex) => (\n            <div key={rowIndex} className=\"word-grid-row\">\n              {row.map((cell, colIndex) => (\n                <div\n                  key={colIndex}\n                  className={`word-grid-cell ${cell && selectedAnswers[rowIndex * gridSize + colIndex] ? 'selected' : ''}`}\n                  onClick={() => handleAnswerClick(rowIndex, colIndex)}\n                >\n                  {cell}\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n      {(allCellsFilled() && checkWord()) && (\n        <button className=\"next-button\" onClick={() => setCurrentQuestion(currentQuestion + 1)}>\n          Próxima\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Questions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}