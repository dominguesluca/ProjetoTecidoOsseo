{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const questions = [{\n    question: 'São tipos de tecido ósseo?',\n    answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['COMPACTO', 'ESPONJOSO']\n  }, {\n    question: 'Classificação histológica dos ossos',\n    answers: ['Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['IMATURO', 'LAMELAR']\n  }\n  // Adicione o restante das perguntas...\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array.from({\n    length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0)\n  }, () => ''));\n  const [wordGrid, setWordGrid] = useState([]);\n  const [showNextButton, setShowNextButton] = useState(false);\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n  const generateWordGrid = () => {\n    const grid = Array.from({\n      length: 8\n    }, () => Array(8).fill(''));\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    questions[currentQuestion].correctAnswers.forEach(word => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Seleciona uma direção aleatória: horizontal (0) ou vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n      do {\n        row = Math.floor(Math.random() * 8);\n        col = Math.floor(Math.random() * 8);\n        tries++;\n        if (tries > 100) return; // Evita loop infinito\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n      placeWord(grid, row, col, word, direction);\n    });\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0 && col + length > 8) return false; // Fora dos limites na horizontal\n    if (direction === 1 && row + length > 8) return false; // Fora dos limites na vertical\n\n    for (let i = 0; i < length; i++) {\n      if (direction === 0 && grid[row][col + i] !== '') return false; // Colisão na horizontal\n      if (direction === 1 && grid[row + i][col] !== '') return false; // Colisão na vertical\n    }\n    return true;\n  };\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][col + i] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[row + i][col] = word[i];\n      }\n    }\n  };\n  const handleAnswerClick = (row, col) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[row * 8 + col] = wordGrid[row][col];\n    setSelectedAnswers(newSelectedAnswers);\n    console.log('Clicked Answer:', wordGrid[row][col]);\n  };\n  const checkWord = () => {\n    const selectedWord = selectedAnswers.join('');\n    const correctWords = questions[currentQuestion].correctAnswers;\n    const isCorrect = correctWords.some(word => word === selectedWord);\n    console.log('Selected Word:', selectedWord);\n    console.log('Correct Words:', correctWords);\n    console.log('Is Correct:', isCorrect);\n    return isCorrect;\n  };\n  const allCellsFilled = () => {\n    return selectedAnswers.every(answer => answer !== '');\n  };\n  const handlePreviousQuestion = () => {\n    if (currentQuestion > 0) {\n      setCurrentQuestion(currentQuestion - 1);\n    }\n  };\n  const handleNextQuestion = () => {\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    }\n  };\n  const handleShowCorrectWord = () => {\n    setShowCorrectWord(true);\n  };\n  const handleHideCorrectWord = () => {\n    setShowCorrectWord(false);\n  };\n  const handleCheckAnswer = () => {\n    if (checkWord()) {\n      setShowNextButton(true);\n    }\n  };\n  console.log('Selected Answers:', selectedAnswers);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-background\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"question\",\n        children: questions[currentQuestion].question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-grid\",\n        children: wordGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-grid-row\",\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `word-grid-cell ${cell && selectedAnswers[rowIndex * 8 + colIndex] ? 'selected' : ''} ${showCorrectWord && questions[currentQuestion].correctAnswers.some(word => word === cell) ? 'correct-word' : ''}`,\n            onClick: () => handleAnswerClick(rowIndex, colIndex),\n            children: cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"check-answer-button\",\n      onClick: handleCheckAnswer,\n      children: \"Verificar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), showNextButton && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: handleNextQuestion,\n      children: \"Pr\\xF3xima\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this), currentQuestion > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"previous-button\",\n      onClick: handlePreviousQuestion,\n      children: \"Anterior\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"show-correct-word-button\",\n      onClick: handleShowCorrectWord,\n      children: \"Mostrar palavra correta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"hide-correct-word-button\",\n      onClick: handleHideCorrectWord,\n      children: \"Esconder palavra correta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"o2rheytiRYtam3ukWlH5AHfdDhk=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Questions","_s","questions","question","answers","correctAnswers","currentQuestion","setCurrentQuestion","selectedAnswers","setSelectedAnswers","Array","from","length","reduce","acc","answer","wordGrid","setWordGrid","showNextButton","setShowNextButton","generateWordGrid","grid","fill","availableChars","forEach","word","wordLength","row","col","tries","direction","Math","random","floor","canPlaceWord","placeWord","console","log","i","handleAnswerClick","newSelectedAnswers","checkWord","selectedWord","join","correctWords","isCorrect","some","allCellsFilled","every","handlePreviousQuestion","handleNextQuestion","handleShowCorrectWord","setShowCorrectWord","handleHideCorrectWord","handleCheckAnswer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","rowIndex","cell","colIndex","showCorrectWord","onClick","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  const questions = [\n    {\n      question: 'São tipos de tecido ósseo?',\n      answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['COMPACTO', 'ESPONJOSO']\n    },\n    {\n      question: 'Classificação histológica dos ossos',\n      answers: ['Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['IMATURO', 'LAMELAR']\n    }\n    // Adicione o restante das perguntas...\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array.from({ length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0) }, () => ''));\n  const [wordGrid, setWordGrid] = useState([]);\n  const [showNextButton, setShowNextButton] = useState(false);\n\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n\n  const generateWordGrid = () => {\n    const grid = Array.from({ length: 8 }, () => Array(8).fill(''));\n\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    questions[currentQuestion].correctAnswers.forEach((word) => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Seleciona uma direção aleatória: horizontal (0) ou vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n\n      do {\n        row = Math.floor(Math.random() * 8);\n        col = Math.floor(Math.random() * 8);\n        tries++;\n        if (tries > 100) return; // Evita loop infinito\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n\n      placeWord(grid, row, col, word, direction);\n    });\n\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0 && col + length > 8) return false; // Fora dos limites na horizontal\n    if (direction === 1 && row + length > 8) return false; // Fora dos limites na vertical\n\n    for (let i = 0; i < length; i++) {\n      if (direction === 0 && grid[row][col + i] !== '') return false; // Colisão na horizontal\n      if (direction === 1 && grid[row + i][col] !== '') return false; // Colisão na vertical\n    }\n\n    return true;\n  };\n\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][col + i] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[row + i][col] = word[i];\n      }\n    }\n  };\n\n  const handleAnswerClick = (row, col) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[row * 8 + col] = wordGrid[row][col];\n    setSelectedAnswers(newSelectedAnswers);\n    console.log('Clicked Answer:', wordGrid[row][col]);\n  };\n\n  const checkWord = () => {\n    const selectedWord = selectedAnswers.join('');\n    const correctWords = questions[currentQuestion].correctAnswers;\n    const isCorrect = correctWords.some(word => word === selectedWord);\n    console.log('Selected Word:', selectedWord);\n    console.log('Correct Words:', correctWords);\n    console.log('Is Correct:', isCorrect);\n    return isCorrect;\n  };\n\n  const allCellsFilled = () => {\n    return selectedAnswers.every(answer => answer !== '');\n  };\n\n  const handlePreviousQuestion = () => {\n    if (currentQuestion > 0) {\n      setCurrentQuestion(currentQuestion - 1);\n    }\n  };\n\n  const handleNextQuestion = () => {\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    }\n  };\n\n  const handleShowCorrectWord = () => {\n    setShowCorrectWord(true);\n  };\n\n  const handleHideCorrectWord = () => {\n    setShowCorrectWord(false);\n  };\n\n  const handleCheckAnswer = () => {\n    if (checkWord()) {\n      setShowNextButton(true);\n    }\n  };\n\n  console.log('Selected Answers:', selectedAnswers);\n\n  return (\n    <div className=\"questions-container\">\n      <div className=\"question-background\">\n        <h2 className=\"question\">{questions[currentQuestion].question}</h2>\n      </div>\n      <div className=\"grid-container\">\n        <div className=\"word-grid\">\n          {wordGrid.map((row, rowIndex) => (\n            <div key={rowIndex} className=\"word-grid-row\">\n              {row.map((cell, colIndex) => (\n                <div\n                  key={colIndex}\n                  className={`word-grid-cell ${cell && selectedAnswers[rowIndex * 8 + colIndex] ? 'selected' : ''} ${showCorrectWord && questions[currentQuestion].correctAnswers.some(word => word === cell) ? 'correct-word' : ''}`}\n                  onClick={() => handleAnswerClick(rowIndex, colIndex)}\n                >\n                  {cell}\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n      <button className=\"check-answer-button\" onClick={handleCheckAnswer}>\n        Verificar\n      </button>\n      {showNextButton && (\n        <button className=\"next-button\" onClick={handleNextQuestion}>\n          Próxima\n        </button>\n      )}\n      {currentQuestion > 0 && (\n        <button className=\"previous-button\" onClick={handlePreviousQuestion}>\n          Anterior\n        </button>\n      )}\n      <button className=\"show-correct-word-button\" onClick={handleShowCorrectWord}>\n        Mostrar palavra correta\n      </button>\n      <button className=\"hide-correct-word-button\" onClick={handleHideCorrectWord}>\n        Esconder palavra correta\n      </button>\n    </div>\n  );\n};\n\nexport default Questions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}