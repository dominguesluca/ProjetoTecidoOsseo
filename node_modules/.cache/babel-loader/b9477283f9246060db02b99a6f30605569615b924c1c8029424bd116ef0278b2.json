{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const questions = [{\n    question: 'São tipos de tecido osseo?',\n    answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['Compacto', 'Esponjoso']\n  }, {\n    question: 'Classificação histologica dos ossos',\n    answers: ['Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['Imaturo', 'Lamelar']\n  }\n  // Adicione o restante das perguntas...\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showNextButton, setShowNextButton] = useState(false);\n  const [wordGrid, setWordGrid] = useState([]);\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n  const generateWordGrid = () => {\n    const grid = Array.from({\n      length: 15\n    }, () => Array(15).fill(''));\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const usedPositions = new Set();\n    questions[currentQuestion].answers.forEach(word => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      do {\n        row = Math.floor(Math.random() * 15);\n        col = Math.floor(Math.random() * 15);\n        tries++;\n        if (tries > 100) return; // Evita loop infinito\n      } while (!canPlaceWord(grid, row, col, wordLength, usedPositions));\n      placeWord(grid, row, col, word);\n    });\n\n    // Preenche os espaços vazios com caracteres aleatórios\n    for (let row = 0; row < 15; row++) {\n      for (let col = 0; col < 15; col++) {\n        if (grid[row][col] === '') {\n          grid[row][col] = availableChars[Math.floor(Math.random() * availableChars.length)];\n        }\n      }\n    }\n    setWordGrid(grid);\n  };\n  const canPlaceWord = (grid, row, col, length, usedPositions) => {\n    if (row < 0 || col < 0 || row >= 15 || col >= 15) return false; // Fora dos limites\n    if (usedPositions.has(`${row},${col}`)) return false; // Posição já usada\n\n    const directions = [[1, 0], [0, 1], [1, 1], [1, -1]];\n    for (const [dx, dy] of directions) {\n      let isValid = true;\n      let r = row,\n        c = col;\n      for (let i = 0; i < length; i++) {\n        if (r < 0 || r >= 15 || c < 0 || c >= 15 || grid[r][c] !== '') {\n          isValid = false;\n          break;\n        }\n        r += dx;\n        c += dy;\n      }\n      if (isValid) {\n        for (let i = 0; i < length; i++) {\n          usedPositions.add(`${row},${col}`);\n          row += dx;\n          col += dy;\n        }\n        return true;\n      }\n    }\n    return false;\n  };\n  const placeWord = (grid, row, col, word) => {\n    const directions = [[1, 0], [0, 1], [1, 1], [1, -1]];\n    const [dx, dy] = directions[Math.floor(Math.random() * directions.length)];\n    let r = row,\n      c = col;\n    for (const char of word) {\n      grid[r][c] = char;\n      r += dx;\n      c += dy;\n    }\n  };\n  const handleAnswerClick = answer => {\n    setSelectedAnswer(answer);\n    setShowNextButton(true);\n  };\n  const handleNextButtonClick = () => {\n    setSelectedAnswer(null);\n    setShowNextButton(false);\n    setCurrentQuestion(currentQuestion + 1);\n  };\n  const handleTouchStart = answer => {\n    setSelectedAnswer(answer);\n  };\n  const handleTouchEnd = () => {\n    setShowNextButton(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"question\",\n      children: questions[currentQuestion].question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-grid\",\n      children: wordGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-grid-row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-grid-cell\",\n          children: cell\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answers-container\",\n      children: questions[currentQuestion].answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `answer ${selectedAnswer === answer ? 'selected' : ''}`,\n        onClick: () => handleAnswerClick(answer),\n        onTouchStart: () => handleTouchStart(answer),\n        onTouchEnd: handleTouchEnd,\n        children: answer\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), showNextButton && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: handleNextButtonClick,\n      children: \"Pr\\xF3xima\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"tGaizY31PYjchLidNbBURwYh6y4=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Questions","_s","questions","question","answers","correctAnswers","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","showNextButton","setShowNextButton","wordGrid","setWordGrid","generateWordGrid","grid","Array","from","length","fill","availableChars","usedPositions","Set","forEach","word","wordLength","row","col","tries","Math","floor","random","canPlaceWord","placeWord","has","directions","dx","dy","isValid","r","c","i","add","char","handleAnswerClick","answer","handleNextButtonClick","handleTouchStart","handleTouchEnd","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","rowIndex","cell","colIndex","index","onClick","onTouchStart","onTouchEnd","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  const questions = [\n    {\n      question: 'São tipos de tecido osseo?',\n      answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['Compacto', 'Esponjoso']\n    },\n    {\n      question: 'Classificação histologica dos ossos',\n      answers: ['Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['Imaturo', 'Lamelar']\n    }\n    // Adicione o restante das perguntas...\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showNextButton, setShowNextButton] = useState(false);\n  const [wordGrid, setWordGrid] = useState([]);\n\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n\n  const generateWordGrid = () => {\n    const grid = Array.from({ length: 15 }, () => Array(15).fill(''));\n\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const usedPositions = new Set();\n\n    questions[currentQuestion].answers.forEach((word) => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n\n      do {\n        row = Math.floor(Math.random() * 15);\n        col = Math.floor(Math.random() * 15);\n        tries++;\n        if (tries > 100) return; // Evita loop infinito\n      } while (!canPlaceWord(grid, row, col, wordLength, usedPositions));\n\n      placeWord(grid, row, col, word);\n    });\n\n    // Preenche os espaços vazios com caracteres aleatórios\n    for (let row = 0; row < 15; row++) {\n      for (let col = 0; col < 15; col++) {\n        if (grid[row][col] === '') {\n          grid[row][col] = availableChars[Math.floor(Math.random() * availableChars.length)];\n        }\n      }\n    }\n\n    setWordGrid(grid);\n  };\n\n  const canPlaceWord = (grid, row, col, length, usedPositions) => {\n    if (row < 0 || col < 0 || row >= 15 || col >= 15) return false; // Fora dos limites\n    if (usedPositions.has(`${row},${col}`)) return false; // Posição já usada\n\n    const directions = [[1, 0], [0, 1], [1, 1], [1, -1]];\n    for (const [dx, dy] of directions) {\n      let isValid = true;\n      let r = row, c = col;\n      for (let i = 0; i < length; i++) {\n        if (r < 0 || r >= 15 || c < 0 || c >= 15 || grid[r][c] !== '') {\n          isValid = false;\n          break;\n        }\n        r += dx;\n        c += dy;\n      }\n      if (isValid) {\n        for (let i = 0; i < length; i++) {\n          usedPositions.add(`${row},${col}`);\n          row += dx;\n          col += dy;\n        }\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const placeWord = (grid, row, col, word) => {\n    const directions = [[1, 0], [0, 1], [1, 1], [1, -1]];\n    const [dx, dy] = directions[Math.floor(Math.random() * directions.length)];\n    let r = row, c = col;\n    for (const char of word) {\n      grid[r][c] = char;\n      r += dx;\n      c += dy;\n    }\n  };\n\n  const handleAnswerClick = (answer) => {\n    setSelectedAnswer(answer);\n    setShowNextButton(true);\n  };\n\n  const handleNextButtonClick = () => {\n    setSelectedAnswer(null);\n    setShowNextButton(false);\n    setCurrentQuestion(currentQuestion + 1);\n  };\n\n  const handleTouchStart = (answer) => {\n    setSelectedAnswer(answer);\n  };\n\n  const handleTouchEnd = () => {\n    setShowNextButton(true);\n  };\n\n  return (\n    <div className=\"questions-container\">\n      <h2 className=\"question\">{questions[currentQuestion].question}</h2>\n      <div className=\"word-grid\">\n        {wordGrid.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"word-grid-row\">\n            {row.map((cell, colIndex) => (\n              <div key={colIndex} className=\"word-grid-cell\">{cell}</div>\n            ))}\n          </div>\n        ))}\n      </div>\n      <div className=\"answers-container\">\n        {questions[currentQuestion].answers.map((answer, index) => (\n          <div\n            key={index}\n            className={`answer ${selectedAnswer === answer ? 'selected' : ''}`}\n            onClick={() => handleAnswerClick(answer)}\n            onTouchStart={() => handleTouchStart(answer)}\n            onTouchEnd={handleTouchEnd}\n          >\n            {answer}\n          </div>\n        ))}\n      </div>\n      {showNextButton && (\n        <button className=\"next-button\" onClick={handleNextButtonClick}>Próxima</button>\n      )}\n    </div>\n  );\n};\n\nexport default Questions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}