{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const [questions] = useState([{\n    question: 'Quais são os tipos de tecido ósseo?',\n    answer: 'COMPACTO, ESPONJOSO'\n  }, {\n    question: 'Qual é a classificação histológica dos ossos?',\n    answer: 'IMATURO, LAMELAR'\n  }, {\n    question: 'Quais são os tipos de ossificação?',\n    answer: 'INTRAMEMBRANOSA, ENDOCONDRAIS'\n  }, {\n    question: 'Quais são as duas camadas principais dos ossos?',\n    answer: 'ENDÓSTEO, PERIÓSTEO'\n  }, {\n    question: 'Qual célula é responsável pela produção de matriz óssea?',\n    answer: 'OSTEOBLASTO'\n  }, {\n    question: 'Quais são os principais minerais presentes nos ossos?',\n    answer: 'CÁLCIO E FÓSFORO'\n  }]);\n  const [grid, setGrid] = useState([]);\n  const gridRows = 10;\n  const gridCols = 10;\n  const generateGrid = () => {\n    const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const newGrid = [];\n    for (let i = 0; i < gridRows; i++) {\n      const newRow = [];\n      for (let j = 0; j < gridCols; j++) {\n        const randomIndex = Math.floor(Math.random() * alphabet.length);\n        newRow.push(alphabet[randomIndex]);\n      }\n      newGrid.push(newRow);\n    }\n    return newGrid;\n  };\n  const generateGridWithAnswer = answer => {\n    const newGrid = generateGrid();\n    const rowIndex = Math.floor(Math.random() * gridRows);\n    const colIndex = Math.floor(Math.random() * gridCols);\n    const answerArray = answer.split('');\n    let col = colIndex;\n    for (let i = 0; i < answerArray.length; i++) {\n      if (col >= gridCols) {\n        col = 0;\n      }\n      newGrid[rowIndex][col] = answerArray[i];\n      col++;\n    }\n    setGrid(newGrid);\n  };\n  useEffect(() => {\n    const randomIndex = Math.floor(Math.random() * questions.length);\n    generateGridWithAnswer(questions[randomIndex].answer);\n  }, []);\n  const handleNextQuestion = () => {\n    const randomIndex = Math.floor(Math.random() * questions.length);\n    generateGridWithAnswer(questions[randomIndex].answer);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-container\",\n    children: [questions.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-text\",\n        children: item.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), grid.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cell\",\n            children: cell\n          }, `${rowIndex}-${colIndex}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 21\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: handleNextQuestion,\n      children: \"Pr\\xF3xima Pergunta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"Dx7aXuA/insCNJwwZf5Ov9bAzNI=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Questions","_s","questions","question","answer","grid","setGrid","gridRows","gridCols","generateGrid","alphabet","newGrid","i","newRow","j","randomIndex","Math","floor","random","length","push","generateGridWithAnswer","rowIndex","colIndex","answerArray","split","col","handleNextQuestion","className","children","map","item","index","fileName","_jsxFileName","lineNumber","columnNumber","row","cell","onClick","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  const [questions] = useState([\n    {\n      question: 'Quais são os tipos de tecido ósseo?',\n      answer: 'COMPACTO, ESPONJOSO'\n    },\n    {\n      question: 'Qual é a classificação histológica dos ossos?',\n      answer: 'IMATURO, LAMELAR'\n    },\n    {\n      question: 'Quais são os tipos de ossificação?',\n      answer: 'INTRAMEMBRANOSA, ENDOCONDRAIS'\n    },\n    {\n      question: 'Quais são as duas camadas principais dos ossos?',\n      answer: 'ENDÓSTEO, PERIÓSTEO'\n    },\n    {\n      question: 'Qual célula é responsável pela produção de matriz óssea?',\n      answer: 'OSTEOBLASTO'\n    },\n    {\n      question: 'Quais são os principais minerais presentes nos ossos?',\n      answer: 'CÁLCIO E FÓSFORO'\n    }\n  ]);\n\n  const [grid, setGrid] = useState([]);\n\n  const gridRows = 10;\n  const gridCols = 10;\n\n  const generateGrid = () => {\n    const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const newGrid = [];\n\n    for (let i = 0; i < gridRows; i++) {\n      const newRow = [];\n      for (let j = 0; j < gridCols; j++) {\n        const randomIndex = Math.floor(Math.random() * alphabet.length);\n        newRow.push(alphabet[randomIndex]);\n      }\n      newGrid.push(newRow);\n    }\n\n    return newGrid;\n  };\n\n  const generateGridWithAnswer = (answer) => {\n    const newGrid = generateGrid();\n    const rowIndex = Math.floor(Math.random() * gridRows);\n    const colIndex = Math.floor(Math.random() * gridCols);\n    const answerArray = answer.split('');\n    let col = colIndex;\n\n    for (let i = 0; i < answerArray.length; i++) {\n      if (col >= gridCols) {\n        col = 0;\n      }\n      newGrid[rowIndex][col] = answerArray[i];\n      col++;\n    }\n\n    setGrid(newGrid);\n  };\n\n  useEffect(() => {\n    const randomIndex = Math.floor(Math.random() * questions.length);\n    generateGridWithAnswer(questions[randomIndex].answer);\n  }, []);\n\n  const handleNextQuestion = () => {\n    const randomIndex = Math.floor(Math.random() * questions.length);\n    generateGridWithAnswer(questions[randomIndex].answer);\n  };\n\n  return (\n    <div className=\"questions-container\">\n      {questions.map((item, index) => (\n        <div key={index} className=\"question\">\n          <div className=\"question-text\">{item.question}</div>\n          {grid.length > 0 && (\n            <div className=\"grid\">\n              {grid.map((row, rowIndex) => (\n                <div key={rowIndex} className=\"row\">\n                  {row.map((cell, colIndex) => (\n                    <div key={`${rowIndex}-${colIndex}`} className=\"cell\">\n                      {cell}\n                    </div>\n                  ))}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      ))}\n      <button className=\"next-button\" onClick={handleNextQuestion}>\n        Próxima Pergunta\n      </button>\n    </div>\n  );\n};\n\nexport default Questions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}