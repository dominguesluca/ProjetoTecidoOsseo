{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const questions = [{\n    question: 'São tipos de tecido osseo?',\n    answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['Compacto', 'Esponjoso']\n  }, {\n    question: 'Classificação histologica dos ossos',\n    answers: ['Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['Imaturo', 'Lamelar']\n  }\n  // Adicione o restante das perguntas...\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showNextButton, setShowNextButton] = useState(false);\n  const [wordGrid, setWordGrid] = useState([]);\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n  const generateWordGrid = () => {\n    const grid = Array.from({\n      length: 15\n    }, () => Array(15).fill(''));\n\n    // Preenche a matriz com as palavras\n    questions[currentQuestion].answers.forEach(word => {\n      const wordLength = word.length;\n      let row, col;\n      do {\n        row = Math.floor(Math.random() * 15);\n        col = Math.floor(Math.random() * 15);\n      } while (!canPlaceWord(grid, row, col, wordLength));\n      placeWord(grid, row, col, word);\n    });\n\n    // Preenche os espaços vazios com caracteres aleatórios\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const totalEmptySpaces = 15 * 15 - questions[currentQuestion].answers.reduce((total, word) => total + word.length, 0);\n    let remainingChars = availableChars.repeat(Math.ceil(totalEmptySpaces / availableChars.length));\n    remainingChars = remainingChars.split('').sort(() => Math.random() - 0.5);\n    for (let row = 0; row < 15; row++) {\n      for (let col = 0; col < 15; col++) {\n        if (grid[row][col] === '') {\n          grid[row][col] = remainingChars.pop();\n        }\n      }\n    }\n    setWordGrid(grid);\n  };\n  const canPlaceWord = (grid, row, col, length) => {\n    const directions = [[1, 0], [0, 1], [1, 1], [1, -1], [-1, 0], [0, -1], [-1, -1], [-1, 1]];\n    for (const [dx, dy] of directions) {\n      let isValid = true;\n      let r = row,\n        c = col;\n      for (let i = 0; i < length; i++) {\n        if (r < 0 || r >= 15 || c < 0 || c >= 15 || grid[r][c] !== '' && grid[r][c] !== grid[row][col]) {\n          isValid = false;\n          break;\n        }\n        r += dx;\n        c += dy;\n      }\n      if (isValid) return true;\n    }\n    return false;\n  };\n  const placeWord = (grid, row, col, word) => {\n    const directions = [[1, 0], [0, 1], [1, 1], [1, -1], [-1, 0], [0, -1], [-1, -1], [-1, 1]];\n    const [dx, dy] = directions[Math.floor(Math.random() * directions.length)];\n    let r = row,\n      c = col;\n    for (const char of word) {\n      grid[r][c] = char;\n      r += dx;\n      c += dy;\n    }\n  };\n  const handleAnswerClick = answer => {\n    setSelectedAnswer(answer);\n    setShowNextButton(true);\n  };\n  const handleNextButtonClick = () => {\n    setSelectedAnswer(null);\n    setShowNextButton(false);\n    setCurrentQuestion(currentQuestion + 1);\n  };\n  const handleTouchStart = answer => {\n    setSelectedAnswer(answer);\n  };\n  const handleTouchEnd = () => {\n    setShowNextButton(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"question\",\n      children: questions[currentQuestion].question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-grid\",\n      children: wordGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-grid-row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-grid-cell\",\n          children: cell\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answers-container\",\n      children: questions[currentQuestion].answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `answer ${selectedAnswer === answer ? 'selected' : ''}`,\n        onClick: () => handleAnswerClick(answer),\n        onTouchStart: () => handleTouchStart(answer),\n        onTouchEnd: handleTouchEnd,\n        children: answer\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), showNextButton && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: handleNextButtonClick,\n      children: \"Pr\\xF3xima\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"tGaizY31PYjchLidNbBURwYh6y4=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Questions","_s","questions","question","answers","correctAnswers","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","showNextButton","setShowNextButton","wordGrid","setWordGrid","generateWordGrid","grid","Array","from","length","fill","forEach","word","wordLength","row","col","Math","floor","random","canPlaceWord","placeWord","availableChars","totalEmptySpaces","reduce","total","remainingChars","repeat","ceil","split","sort","pop","directions","dx","dy","isValid","r","c","i","char","handleAnswerClick","answer","handleNextButtonClick","handleTouchStart","handleTouchEnd","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","rowIndex","cell","colIndex","index","onClick","onTouchStart","onTouchEnd","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  const questions = [\n    {\n      question: 'São tipos de tecido osseo?',\n      answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['Compacto', 'Esponjoso']\n    },\n    {\n      question: 'Classificação histologica dos ossos',\n      answers: ['Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['Imaturo', 'Lamelar']\n    }\n    // Adicione o restante das perguntas...\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showNextButton, setShowNextButton] = useState(false);\n  const [wordGrid, setWordGrid] = useState([]);\n\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n\n  const generateWordGrid = () => {\n    const grid = Array.from({ length: 15 }, () => Array(15).fill(''));\n  \n    // Preenche a matriz com as palavras\n    questions[currentQuestion].answers.forEach((word) => {\n      const wordLength = word.length;\n      let row, col;\n      do {\n        row = Math.floor(Math.random() * 15);\n        col = Math.floor(Math.random() * 15);\n      } while (!canPlaceWord(grid, row, col, wordLength));\n  \n      placeWord(grid, row, col, word);\n    });\n  \n    // Preenche os espaços vazios com caracteres aleatórios\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const totalEmptySpaces = 15 * 15 - questions[currentQuestion].answers.reduce((total, word) => total + word.length, 0);\n    let remainingChars = availableChars.repeat(Math.ceil(totalEmptySpaces / availableChars.length));\n    remainingChars = remainingChars.split('').sort(() => Math.random() - 0.5);\n    \n    for (let row = 0; row < 15; row++) {\n      for (let col = 0; col < 15; col++) {\n        if (grid[row][col] === '') {\n          grid[row][col] = remainingChars.pop();\n        }\n      }\n    }\n  \n    setWordGrid(grid);\n  };\n  \n  const canPlaceWord = (grid, row, col, length) => {\n    const directions = [[1, 0], [0, 1], [1, 1], [1, -1], [-1, 0], [0, -1], [-1, -1], [-1, 1]];\n    for (const [dx, dy] of directions) {\n      let isValid = true;\n      let r = row, c = col;\n      for (let i = 0; i < length; i++) {\n        if (r < 0 || r >= 15 || c < 0 || c >= 15 || (grid[r][c] !== '' && grid[r][c] !== grid[row][col])) {\n          isValid = false;\n          break;\n        }\n        r += dx;\n        c += dy;\n      }\n      if (isValid) return true;\n    }\n    return false;\n  };\n  \n  const placeWord = (grid, row, col, word) => {\n    const directions = [[1, 0], [0, 1], [1, 1], [1, -1], [-1, 0], [0, -1], [-1, -1], [-1, 1]];\n    const [dx, dy] = directions[Math.floor(Math.random() * directions.length)];\n    let r = row, c = col;\n    for (const char of word) {\n      grid[r][c] = char;\n      r += dx;\n      c += dy;\n    }\n  };\n\n  const handleAnswerClick = (answer) => {\n    setSelectedAnswer(answer);\n    setShowNextButton(true);\n  };\n\n  const handleNextButtonClick = () => {\n    setSelectedAnswer(null);\n    setShowNextButton(false);\n    setCurrentQuestion(currentQuestion + 1);\n  };\n\n  const handleTouchStart = (answer) => {\n    setSelectedAnswer(answer);\n  };\n\n  const handleTouchEnd = () => {\n    setShowNextButton(true);\n  };\n\n  return (\n    <div className=\"questions-container\">\n      <h2 className=\"question\">{questions[currentQuestion].question}</h2>\n      <div className=\"word-grid\">\n        {wordGrid.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"word-grid-row\">\n            {row.map((cell, colIndex) => (\n              <div key={colIndex} className=\"word-grid-cell\">{cell}</div>\n            ))}\n          </div>\n        ))}\n      </div>\n      <div className=\"answers-container\">\n        {questions[currentQuestion].answers.map((answer, index) => (\n          <div\n            key={index}\n            className={`answer ${selectedAnswer === answer ? 'selected' : ''}`}\n            onClick={() => handleAnswerClick(answer)}\n            onTouchStart={() => handleTouchStart(answer)}\n            onTouchEnd={handleTouchEnd}\n          >\n            {answer}\n          </div>\n        ))}\n      </div>\n      {showNextButton && (\n        <button className=\"next-button\" onClick={handleNextButtonClick}>Próxima</button>\n      )}\n    </div>\n  );\n};\n\nexport default Questions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}