{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const questions = [{\n    question: 'São tipos de tecido ósseo?',\n    answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['COMPACTO', 'ESPONJOSO']\n  }, {\n    question: 'Classificação histológica dos ossos',\n    answers: ['Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['Imaturo', 'Lamelar']\n  }\n  // Adicione o restante das perguntas...\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(Array.from({\n    length: 64\n  }, () => ''));\n  const [showNextButton, setShowNextButton] = useState(false);\n  const [wordGrid, setWordGrid] = useState(Array.from({\n    length: 8\n  }, () => Array(8).fill('')));\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n  const generateWordGrid = () => {\n    const grid = Array.from({\n      length: 8\n    }, () => Array(8).fill(''));\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    questions[currentQuestion].correctAnswers.forEach(word => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Seleciona uma direção aleatória: horizontal (0) ou vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n      do {\n        row = Math.floor(Math.random() * 8);\n        col = Math.floor(Math.random() * 8);\n        tries++;\n        if (tries > 100) return; // Evita loop infinito\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n      placeWord(grid, row, col, word, direction);\n    });\n    setWordGrid(grid);\n  };\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0 && col + length > 8) return false; // Fora dos limites na horizontal\n    if (direction === 1 && row + length > 8) return false; // Fora dos limites na vertical\n\n    for (let i = 0; i < length; i++) {\n      if (direction === 0 && grid[row][col + i] !== '') return false; // Colisão na horizontal\n      if (direction === 1 && grid[row + i][col] !== '') return false; // Colisão na vertical\n    }\n    return true;\n  };\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][col + i] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[row + i][col] = word[i];\n      }\n    }\n  };\n  const handleAnswerClick = (answer, index) => {\n    const newSelectedAnswer = [...selectedAnswer];\n    newSelectedAnswer[index] = answer;\n    setSelectedAnswer(newSelectedAnswer);\n    setShowNextButton(newSelectedAnswer.join('') === questions[currentQuestion].correctAnswers.join(''));\n  };\n  const handleNextButtonClick = () => {\n    setSelectedAnswer(Array.from({\n      length: 64\n    }, () => ''));\n    setShowNextButton(false);\n    setCurrentQuestion(currentQuestion + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-background\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"question\",\n        children: questions[currentQuestion].question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-grid\",\n        children: wordGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-grid-row\",\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"word-grid-cell\",\n            children: cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answers-container\",\n      children: questions[currentQuestion].answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `answer ${selectedAnswer[index] === answer ? 'selected' : ''}`,\n        onClick: () => handleAnswerClick(answer, index),\n        children: answer\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), showNextButton && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: handleNextButtonClick,\n      children: \"Pr\\xF3xima\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"2CTtjGZpw4VFVqOVSkcDFAJmoz4=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Questions","_s","questions","question","answers","correctAnswers","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","Array","from","length","showNextButton","setShowNextButton","wordGrid","setWordGrid","fill","generateWordGrid","grid","availableChars","forEach","word","wordLength","row","col","tries","direction","Math","random","floor","canPlaceWord","placeWord","i","handleAnswerClick","answer","index","newSelectedAnswer","join","handleNextButtonClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","rowIndex","cell","colIndex","onClick","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  const questions = [\n    {\n      question: 'São tipos de tecido ósseo?',\n      answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['COMPACTO', 'ESPONJOSO']\n    },\n    {\n      question: 'Classificação histológica dos ossos',\n      answers: ['Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['Imaturo', 'Lamelar']\n    }\n    // Adicione o restante das perguntas...\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(Array.from({ length: 64 }, () => ''));\n  const [showNextButton, setShowNextButton] = useState(false);\n  const [wordGrid, setWordGrid] = useState(Array.from({ length: 8 }, () => Array(8).fill('')));\n\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n\n  const generateWordGrid = () => {\n    const grid = Array.from({ length: 8 }, () => Array(8).fill(''));\n\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    questions[currentQuestion].correctAnswers.forEach((word) => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Seleciona uma direção aleatória: horizontal (0) ou vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n\n      do {\n        row = Math.floor(Math.random() * 8);\n        col = Math.floor(Math.random() * 8);\n        tries++;\n        if (tries > 100) return; // Evita loop infinito\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n\n      placeWord(grid, row, col, word, direction);\n    });\n\n    setWordGrid(grid);\n  };\n\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0 && col + length > 8) return false; // Fora dos limites na horizontal\n    if (direction === 1 && row + length > 8) return false; // Fora dos limites na vertical\n\n    for (let i = 0; i < length; i++) {\n      if (direction === 0 && grid[row][col + i] !== '') return false; // Colisão na horizontal\n      if (direction === 1 && grid[row + i][col] !== '') return false; // Colisão na vertical\n    }\n\n    return true;\n  };\n\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][col + i] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[row + i][col] = word[i];\n      }\n    }\n  };\n\n  const handleAnswerClick = (answer, index) => {\n    const newSelectedAnswer = [...selectedAnswer];\n    newSelectedAnswer[index] = answer;\n    setSelectedAnswer(newSelectedAnswer);\n    setShowNextButton(newSelectedAnswer.join('') === questions[currentQuestion].correctAnswers.join(''));\n  };\n\n  const handleNextButtonClick = () => {\n    setSelectedAnswer(Array.from({ length: 64 }, () => ''));\n    setShowNextButton(false);\n    setCurrentQuestion(currentQuestion + 1);\n  };\n\n  return (\n    <div className=\"questions-container\">\n      <div className=\"question-background\">\n        <h2 className=\"question\">{questions[currentQuestion].question}</h2>\n      </div>\n      <div className=\"grid-container\">\n        <div className=\"word-grid\">\n          {wordGrid.map((row, rowIndex) => (\n            <div key={rowIndex} className=\"word-grid-row\">\n              {row.map((cell, colIndex) => (\n                <div key={colIndex} className=\"word-grid-cell\">{cell}</div>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className=\"answers-container\">\n        {questions[currentQuestion].answers.map((answer, index) => (\n          <div\n            key={index}\n            className={`answer ${selectedAnswer[index] === answer ? 'selected' : ''}`}\n            onClick={() => handleAnswerClick(answer, index)}\n          >\n            {answer}\n          </div>\n        ))}\n      </div>\n      {showNextButton && (\n        <button className=\"next-button\" onClick={handleNextButtonClick}>Próxima</button>\n      )}\n    </div>\n  );\n};\n\nexport default Questions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}