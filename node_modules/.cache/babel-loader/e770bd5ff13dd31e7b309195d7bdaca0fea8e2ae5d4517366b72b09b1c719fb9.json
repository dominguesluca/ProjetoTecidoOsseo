{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { Responsive, WidthProvider } from 'react-grid-layout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResponsiveGridLayout = WidthProvider(Responsive);\n_c = ResponsiveGridLayout;\nconst Questions = () => {\n  _s();\n  const questions = [{\n    question: 'São tipos de tecido ósseo?',\n    correctAnswers: ['COMPACTO', 'ESPONJOSO']\n  }, {\n    question: 'Classificação histológica dos ossos',\n    correctAnswers: ['IMATURO', 'LAMELAR']\n  }\n  // Add the rest of the questions...\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [wordGrid, setWordGrid] = useState([]);\n  const gridSize = wordGrid.length; // Set gridSize to the actual grid length or 8 if it's not defined yet\n\n  useEffect(() => {\n    generateWordGrid();\n    setSelectedAnswers(Array.from({\n      length: wordGrid.length * wordGrid.length\n    }, () => ''));\n  }, [currentQuestion]);\n  const generateWordGrid = () => {\n    const longestWordLength = Math.max(...questions[currentQuestion].correctAnswers.map(word => word.length));\n    const gridSize = Math.max(8, longestWordLength);\n    const grid = Array.from({\n      length: gridSize\n    }, () => Array(gridSize).fill(''));\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    questions[currentQuestion].correctAnswers.forEach(word => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Select a random direction: horizontal (0) or vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n      do {\n        row = Math.floor(Math.random() * gridSize);\n        col = Math.floor(Math.random() * gridSize);\n        tries++;\n        if (tries > 100) return; // Avoid infinite loop\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n      placeWord(grid, row, col, word, direction);\n    });\n    fillEmptyCells(grid, availableChars);\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < length; i++) {\n        if (col + i >= grid.length || col + i < 0 || grid[row][(col + i + grid.length) % grid.length] !== '') {\n          return false;\n        }\n      }\n    } else {\n      for (let i = 0; i < length; i++) {\n        if (row + i >= grid.length || row + i < 0 || grid[(row + i + grid.length) % grid.length][col] !== '') {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][(col + i + grid.length) % grid.length] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[(row + i + grid.length) % grid.length][col] = word[i];\n      }\n    }\n  };\n  const fillEmptyCells = (grid, availableChars) => {\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[row].length; col++) {\n        if (grid[row][col] === '') {\n          const randomIndex = Math.floor(Math.random() * availableChars.length);\n          grid[row][col] = availableChars[randomIndex];\n        }\n      }\n    }\n  };\n  const handleAnswerClick = (row, col) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[row * gridSize + col] = wordGrid[row][col];\n    setSelectedAnswers(newSelectedAnswers);\n    console.log('Clicked Answer:', wordGrid[row][col]);\n  };\n  const checkWord = () => {\n    const selectedWord = selectedAnswers.join('');\n    const correctWords = questions[currentQuestion].correctAnswers;\n    const isCorrect = correctWords.some(word => word === selectedWord);\n    console.log('Selected Word:', selectedWord);\n    console.log('Correct Words:', correctWords);\n    console.log('Is Correct:', isCorrect);\n    return isCorrect;\n  };\n  const allCellsFilled = () => {\n    return selectedAnswers.every(answer => answer !== '');\n  };\n  console.log('Selected Answers:', selectedAnswers);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-background\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"question\",\n        children: questions[currentQuestion].question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: /*#__PURE__*/_jsxDEV(ResponsiveGridLayout, {\n        className: \"word-grid\",\n        layouts: {\n          lg: wordGrid.map((row, rowIndex) => ({\n            x: 0,\n            y: rowIndex,\n            w: gridSize,\n            h: 1\n          }))\n        },\n        breakpoints: {\n          lg: 1200\n        },\n        cols: {\n          lg: gridSize\n        } // Defina a propriedade cols para o breakpoint lg\n        ,\n        rowHeight: 30,\n        width: 1200,\n        children: wordGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-grid-row\",\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `word-grid-cell ${cell && selectedAnswers[rowIndex * gridSize + colIndex] ? 'selected' : ''}`,\n            onClick: () => handleAnswerClick(rowIndex, colIndex),\n            children: cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 9\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 5\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), allCellsFilled() && checkWord() && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: () => setCurrentQuestion(currentQuestion + 1),\n      children: \"Pr\\xF3xima\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"LkrvxyJwfLfuzBCQrOZW0sUSyF8=\");\n_c2 = Questions;\nexport default Questions;\nvar _c, _c2;\n$RefreshReg$(_c, \"ResponsiveGridLayout\");\n$RefreshReg$(_c2, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","Responsive","WidthProvider","jsxDEV","_jsxDEV","ResponsiveGridLayout","_c","Questions","_s","questions","question","correctAnswers","currentQuestion","setCurrentQuestion","selectedAnswers","setSelectedAnswers","wordGrid","setWordGrid","gridSize","length","generateWordGrid","Array","from","longestWordLength","Math","max","map","word","grid","fill","availableChars","forEach","wordLength","row","col","tries","direction","random","floor","canPlaceWord","placeWord","fillEmptyCells","console","log","i","randomIndex","handleAnswerClick","newSelectedAnswers","checkWord","selectedWord","join","correctWords","isCorrect","some","allCellsFilled","every","answer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","layouts","lg","rowIndex","x","y","w","h","breakpoints","cols","rowHeight","width","cell","colIndex","onClick","_c2","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { Responsive, WidthProvider } from 'react-grid-layout';\n\n\n\nconst ResponsiveGridLayout = WidthProvider(Responsive);\n\nconst Questions = () => {\n  const questions = [\n    {\n      question: 'São tipos de tecido ósseo?',\n      correctAnswers: ['COMPACTO', 'ESPONJOSO']\n    },\n    {\n      question: 'Classificação histológica dos ossos',\n      correctAnswers: ['IMATURO', 'LAMELAR']\n    }\n    // Add the rest of the questions...\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [wordGrid, setWordGrid] = useState([]);\n  const gridSize = wordGrid.length; // Set gridSize to the actual grid length or 8 if it's not defined yet\n\n  useEffect(() => {\n    generateWordGrid();\n    setSelectedAnswers(Array.from({ length: wordGrid.length * wordGrid.length }, () => ''));\n  }, [currentQuestion]);\n\n  const generateWordGrid = () => {\n    const longestWordLength = Math.max(...questions[currentQuestion].correctAnswers.map(word => word.length));\n    const gridSize = Math.max(8, longestWordLength);\n    const grid = Array.from({ length: gridSize }, () => Array(gridSize).fill(''));\n\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    questions[currentQuestion].correctAnswers.forEach((word) => {\n      const wordLength = word.length;\n      let row, col;\n      let tries = 0;\n      let direction;\n\n      // Select a random direction: horizontal (0) or vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n\n      do {\n        row = Math.floor(Math.random() * gridSize);\n        col = Math.floor(Math.random() * gridSize);\n        tries++;\n        if (tries > 100) return; // Avoid infinite loop\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n\n      placeWord(grid, row, col, word, direction);\n    });\n\n    fillEmptyCells(grid, availableChars);\n\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < length; i++) {\n        if (col + i >= grid.length || col + i < 0 || grid[row][(col + i + grid.length) % grid.length] !== '') {\n          return false;\n        }\n      }\n    } else {\n      for (let i = 0; i < length; i++) {\n        if (row + i >= grid.length || row + i < 0 || grid[(row + i + grid.length) % grid.length][col] !== '') {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][(col + i + grid.length) % grid.length] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[(row + i + grid.length) % grid.length][col] = word[i];\n      }\n    }\n  };\n\n  const fillEmptyCells = (grid, availableChars) => {\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[row].length; col++) {\n        if (grid[row][col] === '') {\n          const randomIndex = Math.floor(Math.random() * availableChars.length);\n          grid[row][col] = availableChars[randomIndex];\n        }\n      }\n    }\n  };\n\n  const handleAnswerClick = (row, col) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[row * gridSize + col] = wordGrid[row][col];\n    setSelectedAnswers(newSelectedAnswers);\n    console.log('Clicked Answer:', wordGrid[row][col]);\n  };\n\n  const checkWord = () => {\n    const selectedWord = selectedAnswers.join('');\n    const correctWords = questions[currentQuestion].correctAnswers;\n    const isCorrect = correctWords.some(word => word === selectedWord);\n    console.log('Selected Word:', selectedWord);\n    console.log('Correct Words:', correctWords);\n    console.log('Is Correct:', isCorrect);\n    return isCorrect;\n  };\n\n  const allCellsFilled = () => {\n    return selectedAnswers.every(answer => answer !== '');\n  };\n\n  console.log('Selected Answers:', selectedAnswers);\n\n  return (\n    <div className=\"questions-container\">\n      <div className=\"question-background\">\n        <h2 className=\"question\">{questions[currentQuestion].question}</h2>\n      </div>\n      <div className=\"grid-container\">\n      <ResponsiveGridLayout\n  className=\"word-grid\"\n  layouts={{ lg: wordGrid.map((row, rowIndex) => ({ x: 0, y: rowIndex, w: gridSize, h: 1 })) }}\n  breakpoints={{ lg: 1200 }}\n  cols={{ lg: gridSize }} // Defina a propriedade cols para o breakpoint lg\n  rowHeight={30}\n  width={1200}\n>\n  {wordGrid.map((row, rowIndex) => (\n    <div key={rowIndex} className=\"word-grid-row\">\n      {row.map((cell, colIndex) => (\n        <div\n          key={colIndex}\n          className={`word-grid-cell ${cell && selectedAnswers[rowIndex * gridSize + colIndex]? 'selected' : ''}`}\n          onClick={() => handleAnswerClick(rowIndex, colIndex)}\n        >\n          {cell}\n        </div>\n      ))}\n    </div>\n  ))}\n</ResponsiveGridLayout>\n      </div>\n      {(allCellsFilled() && checkWord()) && (\n        <button className=\"next-button\" onClick={() => setCurrentQuestion(currentQuestion + 1)}>\n          Próxima\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Questions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}