{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const questions = [{\n    question: 'São tipos de tecido ósseo?',\n    answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['COMPACTO', 'ESPONJOSO']\n  }, {\n    question: 'Classificação histológica dos ossos',\n    answers: ['Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['IMATURO', 'LAMELAR']\n  }\n  // Adicione o restante das perguntas...\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array.from({\n    length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0)\n  }, () => ''));\n  const [wordGrid, setWordGrid] = useState([]);\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n  const generateWordGrid = () => {\n    const grid = Array.from({\n      length: 8\n    }, () => Array(8).fill(''));\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    questions[currentQuestion].correctAnswers.forEach(word => {\n      const wordLength = word.length;\n      let tries = 0;\n      let direction;\n      do {\n        let row = Math.floor(Math.random() * 8);\n        let col = Math.floor(Math.random() * 8);\n        direction = Math.random() < 0.5 ? 0 : 1;\n        tries++;\n        if (tries > 100) return; // Evita loop infinito\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n      placeWord(grid, row, col, word, direction);\n    });\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0 && col + length > 8) return false; // Fora dos limites na horizontal\n    if (direction === 1 && row + length > 8) return false; // Fora dos limites na vertical\n\n    for (let i = 0; i < length; i++) {\n      if (direction === 0 && grid[row][col + i] !== '') return false; // Colisão na horizontal\n      if (direction === 1 && grid[row + i][col] !== '') return false; // Colisão na vertical\n    }\n    return true;\n  };\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][col + i] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[row + i][col] = word[i];\n      }\n    }\n  };\n  const handleAnswerClick = (row, col) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[row * 8 + col] = wordGrid[row][col];\n    setSelectedAnswers(newSelectedAnswers);\n    console.log('Clicked Answer:', wordGrid[row][col]);\n  };\n  const checkWord = () => {\n    const selectedWord = selectedAnswers.join('');\n    const correctWords = questions[currentQuestion].correctAnswers;\n    const isCorrect = correctWords.some(word => word === selectedWord);\n    console.log('Selected Word:', selectedWord);\n    console.log('Correct Words:', correctWords);\n    console.log('Is Correct:', isCorrect);\n    return isCorrect;\n  };\n  const allCellsFilled = () => {\n    return selectedAnswers.every(answer => answer !== '');\n  };\n  console.log('Selected Answers:', selectedAnswers);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-background\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"question\",\n        children: questions[currentQuestion].question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-grid\",\n        children: wordGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-grid-row\",\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `word-grid-cell ${cell && selectedAnswers[rowIndex * 8 + colIndex] ? 'selected' : ''}`,\n            onClick: () => handleAnswerClick(rowIndex, colIndex),\n            children: cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), allCellsFilled() && checkWord() && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: () => setCurrentQuestion(currentQuestion + 1),\n      children: \"Pr\\xF3xima\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"CNaEWSNE3WXb81fhPUrAUglmQmE=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Questions","_s","questions","question","answers","correctAnswers","currentQuestion","setCurrentQuestion","selectedAnswers","setSelectedAnswers","Array","from","length","reduce","acc","answer","wordGrid","setWordGrid","generateWordGrid","grid","fill","availableChars","forEach","word","wordLength","tries","direction","row","Math","floor","random","col","canPlaceWord","placeWord","console","log","i","handleAnswerClick","newSelectedAnswers","checkWord","selectedWord","join","correctWords","isCorrect","some","allCellsFilled","every","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","rowIndex","cell","colIndex","onClick","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  const questions = [\n    {\n      question: 'São tipos de tecido ósseo?',\n      answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['COMPACTO', 'ESPONJOSO']\n    },\n    {\n      question: 'Classificação histológica dos ossos',\n      answers: ['Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['IMATURO', 'LAMELAR']\n    }\n    // Adicione o restante das perguntas...\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array.from({ length: questions[currentQuestion].correctAnswers.reduce((acc, answer) => acc + answer.length, 0) }, () => ''));\n  const [wordGrid, setWordGrid] = useState([]);\n\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n\n  const generateWordGrid = () => {\n    const grid = Array.from({ length: 8 }, () => Array(8).fill(''));\n\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    questions[currentQuestion].correctAnswers.forEach((word) => {\n      const wordLength = word.length;\n      let tries = 0;\n      let direction;\n\n      do {\n        let row = Math.floor(Math.random() * 8);\n        let col = Math.floor(Math.random() * 8);\n        direction = Math.random() < 0.5 ? 0 : 1;\n        tries++;\n        if (tries > 100) return; // Evita loop infinito\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n\n      placeWord(grid, row, col, word, direction);\n    });\n\n    console.log('Word Grid:', grid);\n    setWordGrid(grid);\n  };\n\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0 && col + length > 8) return false; // Fora dos limites na horizontal\n    if (direction === 1 && row + length > 8) return false; // Fora dos limites na vertical\n\n    for (let i = 0; i < length; i++) {\n      if (direction === 0 && grid[row][col + i] !== '') return false; // Colisão na horizontal\n      if (direction === 1 && grid[row + i][col] !== '') return false; // Colisão na vertical\n    }\n\n    return true;\n  };\n\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][col + i] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[row + i][col] = word[i];\n      }\n    }\n  };\n\n  const handleAnswerClick = (row, col) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[row * 8 + col] = wordGrid[row][col];\n    setSelectedAnswers(newSelectedAnswers);\n    console.log('Clicked Answer:', wordGrid[row][col]);\n  };\n\n  const checkWord = () => {\n    const selectedWord = selectedAnswers.join('');\n    const correctWords = questions[currentQuestion].correctAnswers;\n    const isCorrect = correctWords.some(word => word === selectedWord);\n    console.log('Selected Word:', selectedWord);\n    console.log('Correct Words:', correctWords);\n    console.log('Is Correct:', isCorrect);\n    return isCorrect;\n  };\n\n  const allCellsFilled = () => {\n    return selectedAnswers.every(answer => answer !== '');\n  };\n\n  console.log('Selected Answers:', selectedAnswers);\n\n  return (\n    <div className=\"questions-container\">\n      <div className=\"question-background\">\n        <h2 className=\"question\">{questions[currentQuestion].question}</h2>\n      </div>\n      <div className=\"grid-container\">\n        <div className=\"word-grid\">\n          {wordGrid.map((row, rowIndex) => (\n            <div key={rowIndex} className=\"word-grid-row\">\n              {row.map((cell, colIndex) => (\n                <div\n                  key={colIndex}\n                  className={`word-grid-cell ${cell && selectedAnswers[rowIndex * 8 + colIndex] ? 'selected' : ''}`}\n                  onClick={() => handleAnswerClick(rowIndex, colIndex)}\n                >\n                  {cell}\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n      {(allCellsFilled() && checkWord()) && (\n        <button className=\"next-button\" onClick={() => setCurrentQuestion(currentQuestion + 1)}>\n          Próxima\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Questions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}