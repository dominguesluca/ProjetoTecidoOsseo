{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Questions.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const questions = [{\n    question: 'São tipos de tecido ósseo?',\n    answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['Compacto', 'Esponjoso']\n  }, {\n    question: 'Classificação histológica dos ossos',\n    answers: ['Femur', 'Carta', 'Braquial'],\n    correctAnswers: ['Imaturo', 'Lamelar']\n  }\n  // Adicione o restante das perguntas...\n  ];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showNextButton, setShowNextButton] = useState(false);\n  const [wordGrid, setWordGrid] = useState([]);\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n  const generateWordGrid = () => {\n    const grid = Array.from({\n      length: 8\n    }, () => Array(8).fill(''));\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    questions[currentQuestion].correctAnswers.forEach(word => {\n      const wordLength = word.length;\n      let row, col;\n      let direction;\n\n      // Seleciona uma direção aleatória: horizontal (0) ou vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n      do {\n        row = Math.floor(Math.random() * 8);\n        col = Math.floor(Math.random() * 8);\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n      placeWord(grid, row, col, word, direction);\n    });\n\n    // Preenche os espaços vazios com caracteres aleatórios\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (grid[row][col] === '') {\n          grid[row][col] = availableChars[Math.floor(Math.random() * availableChars.length)];\n        }\n      }\n    }\n    setWordGrid(grid);\n  };\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0 && col + length > 8) return false; // Fora dos limites na horizontal\n    if (direction === 1 && row + length > 8) return false; // Fora dos limites na vertical\n\n    for (let i = 0; i < length; i++) {\n      if (direction === 0 && grid[row][col + i] !== '') return false; // Colisão na horizontal\n      if (direction === 1 && grid[row + i][col] !== '') return false; // Colisão na vertical\n    }\n    return true;\n  };\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][col + i] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[row + i][col] = word[i];\n      }\n    }\n  };\n  const handleAnswerClick = answer => {\n    setSelectedAnswer(answer);\n    setShowNextButton(true);\n  };\n  const handleNextButtonClick = () => {\n    setSelectedAnswer(null);\n    setShowNextButton(false);\n    setCurrentQuestion(currentQuestion + 1);\n  };\n  const handleTouchStart = answer => {\n    setSelectedAnswer(answer);\n  };\n  const handleTouchEnd = () => {\n    setShowNextButton(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-background\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"question\",\n        children: questions[currentQuestion].question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-grid\",\n        children: wordGrid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-grid-row\",\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"word-grid-cell\",\n            children: cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answers-container\",\n      children: questions[currentQuestion].correctAnswers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `answer ${selectedAnswer === answer ? 'selected' : ''}`,\n        onClick: () => handleAnswerClick(answer),\n        onTouchStart: () => handleTouchStart(answer),\n        onTouchEnd: handleTouchEnd,\n        children: answer\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), showNextButton && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: handleNextButtonClick,\n      children: \"Pr\\xF3xima\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"tGaizY31PYjchLidNbBURwYh6y4=\");\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Questions","_s","questions","question","answers","correctAnswers","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","showNextButton","setShowNextButton","wordGrid","setWordGrid","generateWordGrid","grid","Array","from","length","fill","availableChars","forEach","word","wordLength","row","col","direction","Math","random","floor","canPlaceWord","placeWord","i","handleAnswerClick","answer","handleNextButtonClick","handleTouchStart","handleTouchEnd","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","rowIndex","cell","colIndex","index","onClick","onTouchStart","onTouchEnd","_c","$RefreshReg$"],"sources":["/home/lucas/Documentos/Projetos/tecidoosseo/src/components/Questions/Questions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Questions.css';\n\nconst Questions = () => {\n  const questions = [\n    {\n      question: 'São tipos de tecido ósseo?',\n      answers: ['Compacto', 'Esponjoso', 'Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['Compacto', 'Esponjoso']\n    },\n    {\n      question: 'Classificação histológica dos ossos',\n      answers: ['Femur', 'Carta', 'Braquial'],\n      correctAnswers: ['Imaturo', 'Lamelar']\n    }\n    // Adicione o restante das perguntas...\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showNextButton, setShowNextButton] = useState(false);\n  const [wordGrid, setWordGrid] = useState([]);\n\n  useEffect(() => {\n    generateWordGrid();\n  }, [currentQuestion]);\n\n  const generateWordGrid = () => {\n    const grid = Array.from({ length: 8 }, () => Array(8).fill(''));\n\n    const availableChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    questions[currentQuestion].correctAnswers.forEach((word) => {\n      const wordLength = word.length;\n      let row, col;\n      let direction;\n\n      // Seleciona uma direção aleatória: horizontal (0) ou vertical (1)\n      direction = Math.random() < 0.5 ? 0 : 1;\n\n      do {\n        row = Math.floor(Math.random() * 8);\n        col = Math.floor(Math.random() * 8);\n      } while (!canPlaceWord(grid, row, col, wordLength, direction));\n\n      placeWord(grid, row, col, word, direction);\n    });\n\n    // Preenche os espaços vazios com caracteres aleatórios\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (grid[row][col] === '') {\n          grid[row][col] = availableChars[Math.floor(Math.random() * availableChars.length)];\n        }\n      }\n    }\n\n    setWordGrid(grid);\n  };\n\n  const canPlaceWord = (grid, row, col, length, direction) => {\n    if (direction === 0 && col + length > 8) return false; // Fora dos limites na horizontal\n    if (direction === 1 && row + length > 8) return false; // Fora dos limites na vertical\n\n    for (let i = 0; i < length; i++) {\n      if (direction === 0 && grid[row][col + i] !== '') return false; // Colisão na horizontal\n      if (direction === 1 && grid[row + i][col] !== '') return false; // Colisão na vertical\n    }\n\n    return true;\n  };\n\n  const placeWord = (grid, row, col, word, direction) => {\n    if (direction === 0) {\n      for (let i = 0; i < word.length; i++) {\n        grid[row][col + i] = word[i];\n      }\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        grid[row + i][col] = word[i];\n      }\n    }\n  };\n\n  const handleAnswerClick = (answer) => {\n    setSelectedAnswer(answer);\n    setShowNextButton(true);\n  };\n\n  const handleNextButtonClick = () => {\n    setSelectedAnswer(null);\n    setShowNextButton(false);\n    setCurrentQuestion(currentQuestion + 1);\n  };\n\n  const handleTouchStart = (answer) => {\n    setSelectedAnswer(answer);\n  };\n\n  const handleTouchEnd = () => {\n    setShowNextButton(true);\n  };\n\n  return (\n    <div className=\"questions-container\">\n      <div className=\"question-background\">\n        <h2 className=\"question\">{questions[currentQuestion].question}</h2>\n      </div>\n      <div className=\"grid-container\">\n        <div className=\"word-grid\">\n          {wordGrid.map((row, rowIndex) => (\n            <div key={rowIndex} className=\"word-grid-row\">\n              {row.map((cell, colIndex) => (\n                <div key={colIndex} className=\"word-grid-cell\">{cell}</div>\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n      <div className=\"answers-container\">\n        {questions[currentQuestion].correctAnswers.map((answer, index) => (\n          <div\n            key={index}\n            className={`answer ${selectedAnswer === answer ? 'selected' : ''}`}\n            onClick={() => handleAnswerClick(answer)}\n            onTouchStart={() => handleTouchStart(answer)}\n            onTouchEnd={handleTouchEnd}\n          >\n            {answer}\n          </div>\n        ))}\n      </div>\n      {showNextButton && (\n        <button className=\"next-button\" onClick={handleNextButtonClick}>Próxima</button>\n      )}\n    </div>\n  );\n};\n\nexport default Questions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}